// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/.DS_Store
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x3d\x8a\xc3\x30\x10\x85\xdf\x68\xcd\x22\xd8\x46\xe5\x96\xba\xc2\xde\x40\x18\xef\x09\xf6\x02\xfb\xe3\xd2\xe0\x62\xe3\x22\x9d\xab\x9c\x2b\x47\x0b\x46\x2f\xd8\x60\x1b\x92\x22\xc4\x09\xef\x03\xf1\x15\x9e\x91\x8d\x0b\xcd\x8c\x00\x58\xd9\xd5\x1f\x40\x00\xe0\x91\x8d\x03\x16\xf1\x5c\x33\x1c\x6d\x79\x05\xa0\xc3\xae\xfe\xff\x6b\x7e\xdb\xb6\x59\xde\x6b\xc6\x90\xfb\x8a\x06\x3f\xd8\xa3\x9d\xe6\xdb\x85\x1b\x08\x21\x84\x10\xe2\x2a\x58\x62\xfd\xdb\xbd\x3f\x44\x08\xb1\x39\x86\xf3\x21\xd2\x89\xee\xb3\x8d\xcf\x1d\x5d\x4c\x72\x02\x1d\xe9\x44\xf7\xd9\xc6\x38\x47\x17\xb4\xa7\x03\x1d\xe9\x44\xf7\xd9\x3c\xb4\x8c\xc3\x87\xf1\xcd\xc6\x09\xc5\x02\x1d\xe9\x74\x9b\x7f\x23\xc4\xa3\xf3\x92\x15\x86\xfa\xff\xb9\x3e\xff\x0b\x21\x9e\x18\x2b\xaa\xaf\xaa\x1c\x07\x82\x19\x8e\x8d\xc0\x37\x63\x8e\xe7\xc4\x95\x46\xc0\xe5\x0b\xc3\x77\x8c\x71\x6a\x06\x84\xd8\x10\xa7\x00\x00\x00\xff\xff\x4d\x5b\x87\xd9\x04\x18\x00\x00")

func viewDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_viewDs_store,
		"view/.DS_Store",
	)
}

func viewDs_store() (*asset, error) {
	bytes, err := viewDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1588058637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x41\x6f\xeb\x36\x0c\xbe\xf7\x57\x70\x1a\x30\xb7\x43\x1d\x67\xdd\x3b\xa9\x71\x76\x7c\xd7\x61\xd7\x87\x87\x41\xb1\x68\x5b\xab\x2c\x19\x12\x9d\xb6\x0b\xf2\xdf\x1f\x64\x3b\x89\x1d\xdb\xe9\xab\x0e\x45\x4a\x91\x1f\xc9\x8f\x14\xe9\x8d\xa7\x77\x8d\xe0\x33\x5b\xa3\xdc\xde\x01\x00\xac\xb4\x78\xb7\x0d\xc5\x46\xec\xe1\xd0\x4a\xc2\x79\x55\x92\x4a\x0e\x5f\x9e\xd6\xf5\xdb\xf3\x59\x5a\x09\x57\x28\xc3\x61\x0d\xa2\x21\x7b\x2d\x8f\x9d\x2a\x4a\xe2\x30\xb6\xc9\xac\xb6\x8e\xc3\x6b\xa9\x08\x3b\xe9\xf1\x6e\xe4\x58\xdb\xc2\x0e\x3c\xef\xac\x93\xe8\x62\x27\xa4\x6a\x3c\x87\x3f\x87\x58\xb9\xb6\x82\x38\x68\xcc\xe9\x04\x15\xfe\x8e\xe0\x72\x6b\x09\x5d\x9c\xa1\x21\x74\x03\x5c\xc2\x37\x8a\x85\x56\x85\xe1\xd0\x5d\x5e\x70\x6b\xeb\x15\x29\x6b\x38\x38\xd4\x82\xd4\x1e\x9f\x07\xf1\x10\xd9\x8a\xc3\x39\xa9\xe3\xdd\x26\x69\x69\xdc\xde\x6d\x08\xab\x5a\x0b\xc2\x8e\xca\x8d\x8a\xbb\x20\xb6\x67\xeb\x8d\x8a\x4b\x14\x12\x1d\xf0\xd6\x26\x65\x87\x9d\xc8\x5e\x0a\x67\x1b\x23\x79\xf4\xeb\x7a\xbd\x8e\x8e\xec\xa2\xdf\xdb\x54\x68\x1a\xa8\xac\xc4\x94\x95\xd6\xa9\xff\xad\x21\xa1\x19\x50\x89\x15\xa6\x4c\x0a\xf7\xc2\x40\x64\x21\xd0\xd8\x88\x20\xfa\x83\x7d\xc2\x41\xeb\xa4\x7c\x82\x4c\x0b\xef\x53\x36\xa8\x03\x83\x1e\xa4\xab\x5a\x57\x34\xb6\xfd\x6a\x63\xff\x6a\x9d\xdc\x24\xe5\xd3\x0c\x94\x54\xfb\x2b\x2c\x23\xf6\x73\x3e\x13\xa9\xf6\x57\xb9\x26\x5d\xb2\x03\xc6\x92\x13\x65\x23\x16\xaf\x89\xed\xc5\x5e\x05\x6e\x4b\x25\x31\x26\xa7\x8a\x02\x1d\xec\x1c\x8a\x97\xda\x2a\x43\x29\xab\xe4\x12\x2f\x79\x9e\xcf\xf3\xd2\x93\xdf\x53\xad\x43\x4b\xb3\xee\x39\xa4\x2c\x74\xfd\x8c\x4d\x6b\x77\x6a\x05\xd8\xc7\xb9\x75\x29\x53\x84\x15\x28\x03\x01\x6d\xc1\x66\xe0\x2f\x6e\xd5\xf7\xb1\xca\x53\x46\xef\x35\xda\xfc\x3e\x48\x56\xbe\xd9\xfd\x1b\xee\x1f\x20\x4d\x21\x6a\x8c\xc4\x5c\x19\x94\x11\x03\xde\x15\xbe\xd5\x0a\x3f\x6f\xf8\xe8\xfd\xa8\xcc\x1a\xe0\x01\xbd\x37\x0b\x02\xb6\x0d\x84\x87\x5f\x1f\xd8\x3b\xdb\x84\x77\xa5\x95\x79\x01\x4e\x36\x65\x05\xd2\x3f\x41\xf6\xb7\xa0\xf2\xfe\x1c\xc6\x03\x03\x12\x45\xca\x7c\x2d\x0c\xdb\x1e\x0e\xed\x05\x29\xd2\x78\x3c\x6e\x92\x01\xc8\x0d\x4a\x92\x01\x27\x37\x99\xf3\xcd\xae\x2d\xd6\x2d\xde\x7e\x19\xf3\xf6\x41\x96\xe7\x2a\x7a\x6d\x29\x65\x6d\xe0\x1f\xd8\xfc\x24\xbb\x63\x2a\x6e\x47\x91\x8c\xe7\xca\x0d\xaf\xc3\xde\x69\xdb\xce\x37\xbb\xd0\x75\x23\x12\xce\xcd\xe2\x9b\xdd\xcf\xf4\x0a\x7c\x5c\xef\x13\xd2\x75\xb9\x83\xfc\x73\xd5\x86\x4f\x54\x3c\x39\x97\x7c\xe1\x11\xde\x20\x6e\x3a\x69\xce\x90\x6a\x34\x6c\x7a\x66\x33\x6b\x08\x0d\x5d\xc6\x47\x2d\xa4\x54\xa6\xe0\x10\xad\xe1\xe9\x4b\xfd\xd6\xfe\x99\x9f\x21\x7d\xe2\x7b\x85\xaf\xdb\x33\x0d\xed\x7f\x13\xe7\xbd\x9b\xf1\xfc\x9b\xd9\x22\xdd\x5a\xbb\x1a\xb3\xa3\x5d\x77\x19\xd3\xf0\x5b\x66\xeb\xf7\x67\x80\x92\xa8\xf6\x3c\x49\x0a\x45\x65\xb3\x5b\x65\xb6\x4a\x7c\x63\x7c\xa9\x0c\xee\x93\xe2\xa4\x2d\x1a\x2a\xad\xe3\xff\x89\x77\xdf\x98\xe0\xbe\x83\xed\x77\xda\x20\x9c\x21\xbd\x1b\x9f\x39\x55\xf7\x31\x56\x56\x36\x1a\x57\xf8\x56\x5b\x47\x1e\xd2\xc1\xda\x95\x82\x04\x87\xbc\x31\x59\x58\xb0\x70\xff\x30\xb8\x0b\xc7\x21\x35\xce\x5c\x09\xc3\x49\x12\xc8\xac\xc9\x55\x01\x85\xb6\x3b\xa1\xdb\x41\x0a\x5a\x79\x9a\xa8\x86\x1b\x0e\xdf\xa6\x18\xe1\x84\xc7\xc7\x21\x52\xd6\xc7\x35\xda\x5a\x63\xf4\x38\xab\xd7\x76\x2d\x87\xe8\x2b\x1a\x74\x82\x96\xd4\x42\xd3\x73\x88\xc2\x6e\xd6\xd1\x44\xe3\xf8\x7d\x6a\x35\x49\xa4\xed\x07\x3f\xd1\xeb\xc4\x8b\x79\xd4\x22\x7c\x90\x45\xbf\x2f\xc4\xe5\x50\x2a\x87\x19\x71\x38\x8c\x42\x9c\x4e\x9a\xe3\xe3\x0c\xdb\x93\xd4\xe6\xbd\xf4\x41\x24\xb7\x74\x1a\xa7\x83\x8a\x43\x23\xd1\xfd\x15\x2c\xd2\xa4\xeb\xa0\x64\x91\xb5\x91\xe8\x12\xf2\xf1\x71\xf0\x19\x59\xd5\x0d\xa1\xe4\x70\x18\x48\x2b\xa4\xd2\x4a\xcf\xaf\x32\x1a\x8e\xaa\x61\xf3\xb5\x13\x6b\x26\xfb\xbd\x70\x3d\xfd\x90\x02\x95\xca\xaf\x16\x6a\x94\x5b\x07\xf7\x41\x5b\x85\x21\xdb\x29\xcd\x01\x86\xa3\xf2\xce\x61\xd8\xdc\x9d\xe6\x37\xf5\x7d\xb5\x14\xc2\xe9\xf4\xef\xe1\x62\x10\x08\x9c\xd5\x9e\xa9\xec\xb4\xa7\x3a\xb4\x28\x5a\x22\xf8\xf2\x45\xdb\x3d\xe7\x1f\x01\x00\x00\xff\xff\x1a\xa0\x48\x1b\x21\x0c\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3105, mode: os.FileMode(420), modTime: time.Unix(1587988105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5b\x8f\xdb\xb8\x15\x7e\x9f\x5f\x71\xca\x2e\x6a\x0f\x1a\xc9\xce\x00\x9b\x0d\x34\x96\xb1\x45\x02\xf4\x65\x53\x6c\xb1\xed\xd3\x20\x30\x38\xd2\x91\xc4\x0e\x4d\x0a\x22\x6d\xcf\x34\x3b\xff\xbd\x20\x75\xb1\x2e\x94\xe4\x49\xba\xbb\xa3\x87\x44\xe2\xe5\x5c\xbe\x73\x25\xc7\x1b\xa5\x9f\x38\x6e\xaf\xae\x00\x00\x7c\x76\x3c\x78\x9a\xde\x73\x04\x3f\xc6\xbd\x2c\xdf\x3d\x26\x12\xe9\x45\xc8\xb9\x27\xe8\x1e\xe1\x8b\x5d\x6b\x9e\x7b\x1a\x3d\xa4\x85\x3c\x88\xd8\x8b\x24\x97\x45\x00\x7f\xbe\x89\xef\x7f\x48\xbe\xbf\x6d\x96\xd4\xe3\x49\x92\x94\x83\xcf\x17\xb2\xa2\xe9\x0c\xa7\x24\x79\xf7\x6e\xbd\xfe\x7f\x70\x8a\xe3\x02\x95\x9a\xe6\xf6\xf6\xfd\x0f\x93\xac\x36\xab\x0a\xc8\x8d\xc6\x7d\xce\xa9\xc6\xad\x9d\xd9\x30\x8f\xd3\x27\x79\xd0\x60\xe7\x43\x92\xd3\x38\x66\x22\x0d\xbe\x5f\xe7\x8f\xb0\xbe\xcd\x90\xa5\x99\x0e\xe0\xfd\xfa\x98\xdd\x92\x6d\xc3\x62\xc3\xbc\x42\x9e\xce\xdf\xd5\x58\x24\x39\xa8\x9c\x8a\x90\xbc\xbd\x21\xdd\xd9\x6a\x45\x22\x8b\x3d\x04\x9c\xde\x23\xf7\x4e\x2c\xd6\x59\x48\x6e\xd6\x6b\x02\x7b\xd4\x99\x8c\x43\x92\x4b\xa5\x1d\x3b\x5b\xbb\x3d\xa6\x71\x0f\x96\x42\x48\x3e\x3d\xfd\xf2\xcf\x9f\xc0\x42\x36\xb2\xab\xda\x49\x0f\x5a\x7a\x91\xdc\xe7\x1c\x35\x42\x10\x53\x4d\x43\x62\xf7\xed\x38\x53\x9a\xc0\xd1\xdb\xcb\xd8\x90\x2c\x07\x8d\x2b\x11\xf8\x51\x0a\x4f\x21\xc7\x48\x87\xa4\xfc\xff\x5f\x66\x76\x79\x4d\x46\x79\x0d\x9e\x9c\xd3\x08\x33\xc9\x63\x2c\x42\xf2\x81\xb3\xe8\x01\x32\x2c\x10\x7c\xdf\x27\xdb\xcd\xaa\x27\xda\x88\xea\xab\x96\xee\xf3\xe8\x4c\x22\x71\x7f\xd0\x5a\x0a\xd0\x4f\xb9\x31\x77\xc1\xf6\xb4\x78\x22\xf0\x63\x64\x24\x33\x03\x78\x64\x78\x22\xdb\x9f\xcb\x17\xc3\xb9\xdc\x71\x39\x51\x75\x88\x22\x54\xea\x4c\x34\x45\x81\x05\xd5\x48\x20\x88\x99\x32\x08\xc6\x21\x61\x6a\x57\x7f\xec\xea\x05\xbb\x7b\x2d\xc8\xf6\xef\xd5\xd7\x38\xc3\x19\xa1\x66\xe0\xaa\xa7\x7b\xee\xbb\xb2\xfe\xdb\xf2\xf1\x55\xcf\xc9\x67\x9d\xfe\x66\xed\x72\xfa\x98\x1d\xeb\xe8\xd2\xf8\xa8\x3d\xca\x59\x2a\x02\x28\x4c\x64\x8d\xbb\x7a\x07\xd1\x13\x2d\x04\x13\xe9\x19\xd1\x8c\x8a\x98\xe3\x2f\xd6\x25\x97\x8b\x98\x25\xc9\xe2\x9a\x6c\xcb\x6f\x30\x9f\x90\x30\x8e\x6a\x16\xa8\x1e\x1f\x93\x75\xc6\x98\x08\x3c\xb5\x78\x08\x3c\x7d\x1d\x8b\x81\x73\x0c\x55\xe9\x72\xb2\xda\xfc\xc5\x30\xbc\x9c\x95\x8b\xf6\xdf\x38\x5f\xea\xe2\x80\x67\xca\x94\xf3\x6f\x27\x99\x50\xae\x0c\xcd\x7f\x0b\x75\x11\xd5\xcd\x2a\x66\x47\xc7\xf0\x7d\xe1\xcc\x97\x65\x65\x08\x22\xc9\x0f\x7b\xa1\xea\xec\x14\x49\x4e\xba\x49\xcc\xbc\x13\x28\x30\xa9\x13\x15\x93\x62\x22\x49\x9d\x13\x1b\x93\xc2\x8b\x32\x2a\x52\xac\x49\x35\xe3\xbb\x72\x7c\xcc\x47\xeb\x4a\x02\x8a\x4b\xed\xa9\x48\x1a\xf3\x7e\x81\x42\x9e\xde\x00\x13\x31\x3e\xc2\x33\xb1\x73\x35\xe1\x12\x92\xe9\x3c\xed\x70\x47\xc5\xfe\x6b\xfc\x66\x4f\x39\x3f\x7b\x8d\xcc\x51\x7c\x92\x31\xe5\x4b\xcb\xea\x9a\x6c\x3f\xa2\xa6\x6c\xd6\xa0\x5d\xc9\x8f\x1e\x4b\x42\x52\xc8\x93\x6f\xb3\x51\x92\x4c\x08\xe7\x12\xb0\x89\xcb\x51\x19\x3f\xb2\x24\xe9\xca\x69\xd8\x5c\x24\xe5\xaa\x5b\xaa\x5f\x3c\xff\x02\xfb\x94\x26\x9f\xb2\xcc\x87\x0c\xa3\x87\x7b\xf9\x78\xae\x93\x8a\x89\xd4\x54\xdd\x7a\x66\xb3\xaa\xdf\x5e\x2e\xaf\xc1\xc3\xfa\xc8\x57\xa4\xe4\xbd\x41\xf7\x2c\x16\x53\x3b\x95\xc9\xd3\x2e\xb6\xee\xb0\xb3\xa3\x04\x02\xcd\xb4\x49\xc0\xed\xd1\x9d\x1d\x23\x50\xb5\x21\xef\xfb\xc9\x7b\x93\x17\x58\x27\xee\xaa\xa5\x3a\x65\x4c\xe3\x6d\xdd\x23\xc1\xcd\x3a\x7f\xbc\x3d\x77\x63\x01\xdc\x73\x1a\x3d\x90\xed\x26\x92\xb1\x71\x2e\x93\xee\x7b\x3c\x23\x29\x34\x0a\x6d\x2a\xbf\x59\xb4\xdd\xac\xf2\x02\xbb\x0a\x5a\x85\x2e\x52\x91\x25\xc9\x40\xc1\x66\x6c\x56\x3d\xc3\xdf\xb3\xd9\x35\x90\x3c\xf6\x94\x2e\x98\x48\x43\x62\xb2\xfa\x4e\xf2\xb8\x11\x15\x02\x81\xa7\xee\xb4\xc0\x53\x6b\xda\xbe\x19\x4d\xdf\xae\xc9\xca\xa9\xcb\x55\xfd\x5d\x36\x9b\xdb\xab\xb6\x33\x6c\x54\x54\xb0\x5c\x57\x21\x65\x28\xad\xfe\x43\x8f\xb4\x1c\xad\x84\xde\xcb\xf8\xc0\xd1\xc7\xc7\x5c\x16\x5a\x41\xd8\xea\x86\x4d\xe6\x0b\x20\x39\x08\x9b\xb3\x60\x79\xdd\x9a\x33\x4f\x81\xfa\x50\x88\xde\xa0\x79\xfa\x8a\x06\x40\xc8\x1b\xf7\xaa\x96\xbe\xee\x55\x43\x93\x04\x60\x2b\xc3\x70\x69\xdf\x42\x6e\x82\xe7\xd6\x34\x80\xbb\xcf\x63\xf3\xa6\x4b\x0d\x60\xb1\x18\x9b\x8f\x24\x0f\xe0\xce\x19\x8e\x43\x3c\x9a\xad\x4f\xb9\x21\x6a\x53\x84\x83\x72\xfd\x58\xbf\x0a\xe0\xdd\x7a\x7c\x49\xd5\xe9\x2c\x22\x14\x1a\x8b\x85\x73\xdd\xb3\x7b\xfb\x84\x78\x25\x68\x8b\x9c\xea\x6c\x42\xbc\x07\x7c\x0a\x60\x61\xad\x37\xb1\xf2\xab\xb9\xcb\xdc\xb4\xa8\x4c\x8a\x09\x11\x4c\x6e\x0d\xa0\x5b\xfc\x66\xf1\xbc\x59\x8f\x00\xfa\x72\x51\x4b\x3b\x36\xe5\xfc\x0f\xb1\xe5\xa8\xeb\x96\x61\xeb\x72\xed\x13\x65\x9a\x89\xd4\x76\x97\xee\x15\xae\x1c\x3f\x1e\x6f\x8e\xf4\xeb\x8e\x99\x61\x71\x70\xaf\x1b\x3b\xb9\x04\x60\xfa\xcb\xee\xfa\xe7\x2b\x07\x38\xe5\x61\x57\x05\x3d\xe3\xa5\x58\x1e\x2f\x7f\xb2\x51\x3f\x9e\xd1\xcc\xc3\x51\x83\xce\xa8\x86\x10\x74\xc6\xd4\xd5\x10\xe5\x8c\x29\x9f\x3e\x32\xa9\x9c\xa6\xf2\xcd\x41\x7b\xb9\x58\xd1\x9c\xad\xac\xc2\xab\x73\xc6\x59\x5c\xbb\xb7\xe8\x0c\xc5\xb2\x40\x95\x4b\xa1\x10\xc2\xed\x84\xef\xb1\x04\x9a\x95\xbe\x31\xb5\x6f\x4b\x62\x18\x1a\xff\x76\xe9\xd3\x15\x9d\x6a\xff\x2c\x0e\x84\xd0\x25\x65\xff\x31\x33\xa3\x54\x9e\x01\xb9\xc2\x19\x36\x94\x63\xa1\x7b\x52\xee\x55\xea\x56\x1e\x3a\xb6\xec\x8c\x76\x37\xf4\x62\xa0\x3c\x2e\x58\xb3\x7e\xec\x15\x2a\x5d\x0f\xba\xf0\x48\x64\x01\x4b\x06\x4c\xc0\xe4\x32\xa8\xb0\x6e\x16\xdd\xb1\xcf\xa6\x97\x15\x78\x9a\x42\xb9\xbd\xfc\x6e\x11\x21\xe7\x1f\x38\x55\xea\x1f\x74\x8f\x8b\xcf\xa6\xba\x36\x79\x33\x80\xc5\xe8\x55\xdb\xe2\xf9\xd6\x8d\x48\x89\xbe\x4b\x2e\x53\xfc\x7e\x5b\xc1\x68\x3a\x2e\xd7\x60\x74\x38\x62\xc3\xe6\x9c\xa1\x4c\x78\xd5\x22\x0d\xd6\x46\x52\x28\xc9\xd1\x37\xcc\x97\xbd\x8d\x93\x4e\x51\x5d\xb2\x7c\x73\x8c\x5b\x84\xcf\x7c\xed\xf5\x67\x18\x86\x40\xc8\x18\xc6\xa5\xcf\x93\x9f\x39\x52\x85\x10\x65\x52\x2a\x84\xf6\x25\xda\xb5\x1b\xba\xb2\x89\x72\xe0\xf7\xed\x79\xa7\x02\x63\xf1\x06\xbe\xb4\x9b\x9a\x9e\x5e\xcf\xbf\x61\x4e\xba\x3c\x29\xf5\xa2\x79\x39\x92\x97\xc6\x53\x48\x43\x69\xac\x86\x40\x58\xd6\x31\xb7\x19\xe0\x55\xe5\xb6\x5a\xee\x39\x3f\x6e\xdc\xb4\x5d\xd9\x7d\x8e\x22\xd5\x99\x85\x7f\x14\x7c\xa7\xbb\xda\xed\x7f\x22\x6e\x5d\x2e\x77\xd4\xd7\x18\x3c\xfd\x88\xef\xcf\xbf\x38\xb8\x6a\x13\xcd\x44\xd7\x1b\xa8\xba\xad\x81\x99\xfe\xf0\xb8\x33\x90\x7c\x65\x17\x00\x75\x1d\x3d\xd2\x02\x6c\x2d\xb5\xc1\x39\xc3\x10\x6a\x9c\xbf\xfb\x84\x4a\xd1\x14\xfd\xea\xca\x72\x49\xea\x8b\x69\xa8\x46\x02\x02\x7f\xb5\x34\x4d\x75\x6b\x2a\xd3\x74\xf4\xbb\x03\x0d\x5e\x55\x60\xf7\x2f\xd7\x1c\x32\x59\x84\x5c\xad\x75\xe5\xba\xad\x52\x78\x67\x89\x54\x00\x55\xab\x2e\xa0\x67\x1b\xf0\x19\x6a\x06\x6e\x37\x29\xd7\x11\xc1\x10\x2b\x0e\x38\xa7\x79\xff\xca\x6e\x4c\xfb\xfe\xcd\xc0\xb7\x68\xde\xbf\x8b\x98\xa1\xd5\x5a\x39\xa3\x7e\x73\xd9\xe0\x52\xfe\x0c\x7c\xef\x4e\xe2\xa5\xb0\x3b\x9b\xde\xea\x4a\x5f\x69\xaa\x0f\x6a\x14\x45\xf7\x7d\xba\x3b\x5d\x97\xa4\xca\x2c\x6d\x6f\x6b\xc7\x62\xb9\x1b\xf5\x7d\x5d\xa6\x32\x40\xaf\x2a\xc4\x97\xb7\xae\x8d\x46\xdf\x15\x98\x28\xbf\x39\x76\xfb\x5a\xa6\x69\x83\x06\x7b\x71\xa4\x5e\x5a\xcb\xda\xe0\x08\x3c\xfd\xae\xd8\xcc\x1c\x37\x5e\x13\x34\xd5\x1f\x98\x7e\x6f\x78\xe0\xd7\x5f\x87\x21\xf5\xda\xfc\xaa\xf3\x35\x1e\xd2\x26\x4c\x67\xa2\xba\x2f\xab\xea\x6f\xbc\xbd\x9a\xe2\xe6\xfe\x43\xd4\xb2\x90\xa7\x71\x96\xed\xae\x05\x42\xb8\xfb\xec\x3e\x53\x37\xa6\x1d\x23\xe6\x24\xe8\xe7\x07\x95\x59\xfe\xdd\x52\x3f\x6c\xf8\x26\x51\xec\xfc\x86\xc0\xc1\xbb\x73\xa2\xbc\x19\x9a\xb4\xce\xed\x63\x47\x87\x61\x79\x73\x5e\x3f\xc9\x83\xd0\x18\x4f\xb5\xed\x96\x51\xfb\x3e\x6a\x79\x16\xa6\xa4\x69\x7f\x53\x62\xaf\xe8\xb7\xff\x0b\x00\x00\xff\xff\xee\xca\xa9\xd1\xa5\x23\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 9125, mode: os.FileMode(420), modTime: time.Unix(1588075692, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/.DS_Store":           viewDs_store,
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{viewDs_store, map[string]*bintree{}},
		"layout": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
