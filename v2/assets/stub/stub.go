// Code generated by go-bindata. DO NOT EDIT.
// sources:
// stub/config/config.stub
// stub/controller/controller.stub
// stub/go.mod.stub
// stub/html/create.stub
// stub/html/detail.stub
// stub/html/edit.stub
// stub/html/list.stub
// stub/layout/default.stub
// stub/main.stub
// stub/model/model.stub
// stub/response/response.stub
// stub/route/route.stub
// stub/sword/sword.stub
package stub

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stubConfigConfigStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x41\x8b\xdb\x3c\x10\x3d\x6b\x7e\x85\x3e\x41\x82\xfd\x11\x6c\xe8\xa9\x04\x4c\xcb\xae\xbb\x6d\x61\xa1\xa1\xbb\x7b\x6e\x64\x4b\xb6\xd5\x95\x25\x57\x92\x53\xd2\x90\xff\x5e\xc6\x56\xd2\x74\xb3\x87\xfa\xa2\xd1\xcc\x9b\x37\x6f\x34\xe3\x81\xd7\xcf\xbc\x95\xb4\xb6\xa6\x51\x2d\x80\xea\x07\xeb\x02\x4d\x80\xb0\xa6\x0f\x0c\x08\x53\x36\x57\x76\x0c\x4a\xe3\x45\xdb\x96\x01\x10\xd6\xda\xe1\xb9\xcd\x94\xc9\xf7\xbc\xd7\xd9\xee\xcd\xec\x54\xa1\x1b\xab\xac\xb6\x7d\xfe\x5d\x99\x5f\xdd\x98\xb7\xd6\xf5\x0c\x52\x80\x1d\x77\xf4\xa3\xb6\x15\xd7\x1f\x4c\xab\x8c\xbc\x9d\xca\xd1\x82\x2e\x67\xeb\x70\xbc\x80\x94\xd5\xad\x35\x46\xd6\x01\xe3\x48\x91\x95\x37\x87\x23\x40\xd8\x0f\x92\xc6\x4c\x1f\xdc\x58\x07\x7a\x00\x52\xf2\xc0\x2b\xee\x25\xa5\xf4\xff\x93\x1d\x41\x5b\x54\xb7\x66\xa2\x62\x5b\x20\x0f\xd2\xed\xa4\xdb\x60\x77\x3e\x38\x65\x5a\x7a\xfe\x22\xce\x4f\x88\x6f\xf8\x00\x6c\x0b\xa7\x82\x2f\x38\xff\x14\xfe\x64\x7d\x98\xd2\x23\x5d\x64\xe9\xac\xc7\x74\xf2\xe4\xa5\x7b\x25\x3c\x7a\xe9\x30\xbc\xe1\xde\xff\xb4\x4e\xbc\x08\x0f\xd1\x3d\x41\x50\x2b\x7e\xca\x84\x0b\x99\x51\x1f\x29\xab\x28\xff\x6f\x06\x11\xf5\xce\x2d\x34\xa3\xa9\xe9\xbd\xe5\x62\x96\x9f\xcc\x73\xde\xf0\xd0\xc5\xb4\x94\x4a\xe7\xac\xc3\x86\x2a\x2b\xf6\x2b\xbc\xd2\x75\x41\xe7\x99\x67\x5f\x25\x17\x77\x4a\xcb\x8b\xc4\x14\x88\x6a\x26\xd8\x7f\x05\x35\x4a\x63\x2a\x71\x32\x8c\xce\xa0\x17\xc8\x11\x80\x60\xb8\xa0\xd3\x76\x3c\x99\x9e\x3b\xdf\x71\x9d\xcc\x05\xae\xf7\xe0\x9f\x18\xe3\xdd\x28\x7d\xee\xeb\xb3\x51\xa1\xbc\x49\x52\xc4\x0b\x14\x7d\x4d\x9d\x9d\xc6\x07\x44\x54\xe7\xe6\xa6\xa5\xfa\x32\x48\x93\xb0\x7e\xef\x7f\x68\xb6\xa2\x4d\x1f\xb2\x87\xc1\x29\x13\x9a\x84\x2d\xfc\x7a\xe1\xdf\x87\x7a\x48\xd0\x12\x69\xbe\xf0\xef\xea\x8e\x3b\x2f\x43\x31\x86\xe6\xed\x72\x40\xfb\x51\xf5\xb2\x78\x74\xa3\x5c\x6a\x5b\x17\xf7\xb6\xe6\x48\x24\x32\x9c\xfc\x0a\x08\x11\xd9\x69\xc8\xe8\xc5\x75\xc1\x13\xa7\x8a\x67\x59\xa5\xaf\xf6\xad\x6d\x9b\xdd\xf1\xc0\x75\xc2\x16\x3b\x36\x49\x4e\xe7\x17\xb8\xfe\x3b\x44\x05\x47\xf8\x1d\x00\x00\xff\xff\x08\x93\xe9\xa9\xc3\x03\x00\x00")

func stubConfigConfigStubBytes() ([]byte, error) {
	return bindataRead(
		_stubConfigConfigStub,
		"stub/config/config.stub",
	)
}

func stubConfigConfigStub() (*asset, error) {
	bytes, err := stubConfigConfigStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/config/config.stub", size: 963, mode: os.FileMode(420), modTime: time.Unix(1626771432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubControllerControllerStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\x1b\x37\x13\x3e\xef\xfe\x8a\x79\x17\x78\x85\xdd\x40\x5d\x25\x69\xd1\x83\x60\x19\x48\xe4\x3a\x30\x9a\x0f\xc3\x6e\x9b\x83\x61\x08\xdc\xe5\x48\x62\xc3\x25\x65\x72\xd6\x41\x1a\xf8\xbf\x17\x43\xee\x4a\x6a\x6d\xa7\x32\x92\x83\x2b\xf4\xa2\xe5\xc7\xcc\xc3\x87\x9c\x67\x86\xd4\x4a\xd4\x1f\xc4\x02\x41\x78\x8f\x34\x9b\x2b\x4d\xe8\x08\x9b\x95\x16\x84\x69\xaa\x9a\x95\x75\x04\x79\x9a\x64\x68\x6a\x2b\x95\x59\x8c\x7e\xf7\xd6\x64\x3c\xe0\x9c\x75\x9e\x5b\xca\x8e\x94\x6d\x49\x69\xee\x68\xbb\xe0\x4f\x23\x68\xc9\x5f\x83\x34\x5a\x12\xad\xb8\xed\xc9\xd5\xd6\x5c\x67\x69\x9a\x64\x07\x07\x11\x7b\x56\x5b\x33\x57\x8b\xc3\xc3\x6c\x7b\xb0\xb1\x12\xf5\xdf\xc6\x1c\xfa\x95\x35\x1e\x79\xb8\x48\xd3\x79\x6b\x6a\x78\xad\x3c\xe5\x1f\x9d\x22\x74\xc0\xab\x94\x67\x9d\xd1\xfb\x30\x36\x04\x87\x57\x2d\x7a\x82\x27\xdd\x6c\xe8\x15\x10\xb8\xc3\xe7\x34\x91\x15\x8c\x27\x10\x39\x94\xaf\xb4\xad\x84\x3e\xaa\xa6\xd6\x18\xac\x29\x4d\xd4\x1c\x64\x05\x93\x09\x18\xa5\xd9\x3a\x71\x48\xad\x33\xd1\xdd\x97\x6f\xf1\x63\x9e\xc9\x0a\x94\x67\x83\xac\x48\x93\x9b\x34\x19\x8d\xe0\x15\x12\xac\xc4\x02\xd3\x04\x9d\x63\xfc\x8e\x45\x79\x2a\x9c\xc7\x63\xeb\x9a\xbc\x08\xe0\x3c\xfd\xbf\xbb\xd0\x19\x29\x4d\x18\x63\xdb\x9d\x3d\x7f\x13\xba\xc5\x3c\xe3\xa9\x2c\x82\x04\xab\xc9\x04\xb2\x2c\x80\xc4\x2e\x64\xcf\xb2\x0d\xc8\x89\xa1\x21\x74\x5c\xba\x20\x94\x2f\xc8\xaa\x9c\x27\x77\xa0\xd2\x6f\xca\xa3\x70\xf5\x72\x26\x05\x89\x34\xa9\xac\xfc\xb4\x46\x8d\xf1\x2f\xcf\x50\xc8\x17\x5a\xe7\x3d\xe3\x97\x56\x7e\xda\x69\xab\x51\x78\x9e\xa1\x06\x07\x07\x21\xfc\x33\x4f\xae\xad\xe9\xf0\xf0\xf3\x4d\x3c\xc8\x09\xb0\xf4\xca\x5f\x4d\x23\x9c\x5f\x0a\x9d\x47\x06\x83\xce\xf7\x01\xfb\x20\x4b\x42\x83\x69\x1b\x9f\x26\xa1\xfd\xb6\x6d\xc2\xda\x4f\xe3\x79\x9d\xab\x3f\xc2\xc1\x3f\x7f\x9a\x26\x24\x2a\x1d\x3a\x17\x97\x77\x11\x93\x55\xf9\x7e\x89\x0e\xf3\x9e\x45\x79\xac\x8c\xcc\x07\xc1\xad\x28\xa7\xb6\x35\x94\x0f\xd6\x8b\x14\x69\x20\x31\xb5\xcd\xaa\x25\x8c\x44\x66\xbc\x64\xcf\xe4\x94\xdb\xbc\x1c\x27\x50\x39\x45\xa5\xf3\xb9\xb6\x82\x7e\xfc\x21\xdf\x80\xc0\x08\xfa\xc1\x9e\x6e\xd1\x21\xf3\xf6\x1c\xd6\xd6\x49\x9f\x26\x5d\xe3\x7e\xf6\xa3\xd1\x7d\xfc\x3b\xd7\xe2\xae\x1d\xbe\x56\x8d\xa2\xcd\xca\xe5\xbb\xf9\xdc\x23\xe5\x79\x27\x35\xf8\x0e\x9e\x15\xf0\x04\xb6\x0c\x9c\x44\x97\x67\xb5\x43\x41\x28\x67\x82\x40\xa2\xaf\xb3\x5b\x6b\x31\x63\x8a\x8a\x8f\x69\x5c\x9e\x21\x71\x18\xa7\x56\xe2\x38\x66\xf8\x39\x09\x6a\xfd\xbb\x9f\x87\x69\x92\x1c\x09\x12\xe3\x8d\x31\x57\x03\xb6\x4e\xb8\x31\x86\x1e\x97\x2d\x93\x53\xb1\x50\x46\x90\xb2\x66\xcb\x61\x33\x18\xdc\xd8\x28\x30\x1e\x03\xc0\x9a\x7e\x70\x4f\x7e\xe9\x0f\x9f\xe7\xd6\x91\xd8\x9a\x0b\x81\x1b\x03\x28\x43\xf9\x26\x92\x45\xb4\x98\xb6\xce\xa1\x21\x1e\x1a\x43\x9f\x91\x3c\x73\xc3\xbf\xfc\xc3\x49\x20\xd7\xe9\x14\x84\xfe\xa6\x93\xf9\xc0\x21\xed\x94\x44\xb3\xe8\x3f\x81\x58\x11\xcb\x50\x04\x73\xb9\x93\x6f\xd7\x37\x4a\xa7\x37\x5d\x71\x3d\x42\x8d\x84\x8f\xab\xbc\x7e\x65\xd9\xd1\x76\x51\x9e\x3a\x65\x68\x9e\x67\xff\xbf\xce\x02\x4e\x71\xc7\x69\x70\x85\x8b\x49\xf8\x01\xf3\x46\xac\x2e\x3c\x39\x65\x16\x97\xca\xd0\xf7\xcf\x8b\x2f\x97\x23\xf6\xdd\xe9\xc8\xfd\x95\xe6\x35\x6e\xe5\x65\x9a\x24\x27\x72\x0c\x8c\x73\x91\x29\x99\x5d\xf6\xf2\xa8\xca\x2e\x24\x03\x7f\xa5\x1f\x9e\x2d\x6f\xfc\x62\x0c\x90\xf9\xb6\xae\xd1\xfb\xec\x71\x8a\x6e\x1a\x6a\xc4\x5e\x89\xee\x3e\x71\x3d\xf4\x9e\xdb\x59\x58\xb2\x2a\xbb\x63\xec\x7c\xf6\x52\x29\x3f\x49\xf5\xc8\xde\x7e\xff\x36\x9d\xb4\x2b\x29\x08\x8f\xbe\xb0\x8c\xac\xca\x63\xe5\x3c\xe5\x83\x8d\xed\x30\x54\xa6\xf2\x84\x03\xb7\x85\x30\x81\xf8\x2c\x94\x55\x79\x2e\xae\x71\xdb\xe3\x5b\x08\xb0\xbb\xeb\xc3\xe6\x1e\x97\x1e\xb7\xee\x4b\x12\x4a\xef\xb5\x24\xff\x72\x7f\xfa\x6c\x08\x55\xf0\xe4\x57\xb3\x13\x8d\xbf\xe7\xca\xfc\x87\x0b\x33\xfa\x7e\x6d\x4a\x6c\x8b\x35\x88\x04\x22\x6e\xbc\x42\xf7\x5b\x82\xbd\x02\x5f\x0a\xaa\x97\xff\x3d\xdb\xe0\x22\x3e\xd4\xbe\x59\xa1\x9c\x5b\x07\xb3\x21\x28\x19\xf4\x23\xcc\x02\x43\xb1\x0b\xb6\xeb\xbf\x47\xb7\x34\xc9\x8f\x38\x25\x6f\x8a\xfe\xd5\x76\x5b\xb4\xc5\x3a\x92\x7b\x73\x39\xff\x19\x00\x00\xff\xff\x5e\xc3\x0f\x41\x50\x12\x00\x00")

func stubControllerControllerStubBytes() ([]byte, error) {
	return bindataRead(
		_stubControllerControllerStub,
		"stub/controller/controller.stub",
	)
}

func stubControllerControllerStub() (*asset, error) {
	bytes, err := stubControllerControllerStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/controller/controller.stub", size: 4688, mode: os.FileMode(420), modTime: time.Unix(1626768718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubGoModStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\x55\xb0\xb1\x81\x30\xe2\xf3\x12\x73\x53\xed\xec\xb8\xb8\xd2\xf3\x15\x0c\xf5\x0c\x8d\xb9\x00\x01\x00\x00\xff\xff\xd1\x29\x85\xa2\x20\x00\x00\x00")

func stubGoModStubBytes() ([]byte, error) {
	return bindataRead(
		_stubGoModStub,
		"stub/go.mod.stub",
	)
}

func stubGoModStub() (*asset, error) {
	bytes, err := stubGoModStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/go.mod.stub", size: 32, mode: os.FileMode(420), modTime: time.Unix(1626666803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlCreateStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\xcc\xb2\x05\x24\xa3\xfe\xda\xa0\x58\x14\xaa\x29\xb4\x3d\x14\x6d\x0f\xd9\x43\x7a\x5b\x2c\x02\x5a\x1a\x2a\x4c\x28\x52\x20\x47\x8e\x8d\xc0\xff\xbd\xa0\x64\x47\x8e\x25\x7f\xa0\x3c\x10\x30\x39\xf3\xe6\xbd\x37\x43\x79\x49\x58\x56\x5a\x10\xa6\x23\x00\x80\x65\xae\xd6\x90\x69\xe1\x3d\x67\x5a\x6c\x6d\x4d\xac\xbd\x68\x2e\xd5\x74\xe5\x50\xe4\x99\xab\xcb\x15\x24\x9e\xb6\x1a\x39\x7b\x2b\x85\x2b\x94\x49\x20\xba\xfb\xb9\xda\x40\xd8\xa2\xdd\x51\x56\x2f\x73\xaa\x08\xcb\x74\xb9\x24\xb1\xd2\xf8\x68\x44\x89\x69\xba\x9c\xf7\x23\xae\x21\x64\x0e\x05\xe1\xc5\xcc\x8f\x97\x1f\x94\x64\xd6\x10\x1a\xea\x64\x54\x22\xcf\x95\x29\xf6\x3a\xa2\x09\x94\xca\xfc\x85\xaa\x78\xa2\x70\xf4\xcb\xa2\x39\x5b\x89\xec\xa5\x70\xb6\x36\x79\x02\xd1\x0f\x52\xca\x21\xa9\xce\xbe\x02\x6d\x2b\xe4\x4c\x6a\xdc\x30\x78\xae\x3d\x29\xb9\xe5\xcc\x93\x70\xc4\x40\x68\x55\x18\xce\x4a\x95\xe7\x1a\x19\x24\x45\x4d\x84\x8e\xb3\xcf\x5f\x18\xac\xa7\xd2\x3a\xce\xe2\xb5\xd0\x35\x4e\x82\x39\x63\x50\x06\x94\x91\x96\x41\xcf\xf3\xe8\x6e\x51\x6d\x60\xd1\x23\xf1\xae\x51\x83\xaf\x84\xe1\xec\x8e\x75\xb9\x84\x1b\xfa\x3d\x50\x48\x22\x17\xe4\x85\xec\xb7\xb7\x50\x6a\xb7\x0b\x86\x65\x56\x5f\x41\xfb\x32\x50\x6e\x1f\xa4\x4c\x55\x13\xac\xa7\xa5\xcd\x51\x73\x16\x78\x7f\x0b\xd0\xdf\x59\xd3\xe3\xe6\x7a\x00\x7d\xa8\x6c\x38\x74\xf6\x75\xc8\xde\xab\xfc\xc0\x4a\xe9\x91\xae\x0b\x3f\xa7\x63\x55\x13\x59\xb3\x6f\xa3\xaf\xb3\x0c\xbd\x67\xf0\x5b\xa6\x55\xf6\xc2\x59\x61\x1f\xc4\x1a\x59\x1a\xf6\x66\xc6\x9a\xe8\xdb\xc0\xda\x56\x76\x48\x7f\x88\xec\x85\xa5\x61\xbf\x84\x74\x9b\x43\x6d\x54\x33\xd8\xfb\xf7\x3c\xcf\xd5\x3a\x1d\x2d\xe7\xdd\x33\x5f\xfa\xcc\xa9\x8a\xf6\x6c\x82\x27\xf3\x67\xb1\x16\xed\xe9\xde\x90\xd2\xe6\xb5\xc6\x19\x6e\x2a\xeb\xc8\x03\x87\xb7\xf7\x12\xb9\x20\x91\x80\xac\x4d\x46\xca\x9a\x78\x7c\x74\x15\x96\x43\xaa\x9d\x39\x39\x6c\x2e\x6c\x4d\xf8\x77\x9e\x00\x3d\x29\x3f\x53\xf9\xa4\x17\x11\x8c\x49\xfa\x89\x41\xc5\xf2\xd9\x3f\x86\xc2\x8f\x21\x26\xed\xbb\xb3\xeb\xa3\x49\x85\x3a\xf7\x8f\x41\xe5\x30\xe8\x11\xea\x51\xec\x10\xf8\x68\xf8\xd7\x51\xd1\xca\xd9\xca\x27\xf0\x2d\x52\x79\xf4\xbd\x3b\x2e\x91\x9e\x6c\xee\x93\x13\x3b\xda\x9e\x5f\x30\x31\xac\xc6\xa6\x1f\x1b\xd7\xdc\xac\xb0\xf1\xf4\xf3\x78\x74\x41\x72\x3b\x91\x57\x30\x95\x8c\x3f\x35\xb8\x6b\x74\x4a\x6e\xff\x0c\xb2\xff\xdd\x56\x18\x8f\x87\xa2\xe1\xbd\x9d\x57\x2c\x79\xa7\x2b\x36\xca\xfa\x41\x9c\x59\x65\x3d\xc5\xd1\x5c\x54\x6a\xfe\xf1\xcb\x3f\x6f\x3f\xe3\xd1\xe4\x9f\x87\xaf\xf7\x33\x4f\x4e\x99\x42\xc9\x6d\xdc\x8e\x89\x91\x76\x3c\x1e\x46\xa4\x27\x34\xb1\x43\x5f\x59\xe3\x91\xa7\xc3\xfc\xf7\xaa\x0f\x61\xb3\xd0\xee\x59\x66\x73\x84\x4f\x9c\xc3\xdd\x62\x71\x4e\xf8\x61\x09\x8d\x8e\x4e\xf2\x4b\x5f\x0c\x73\x3a\xac\x33\xae\x1d\x56\xdf\xbd\xc3\xfa\xba\x7a\xc6\x8c\x66\xc2\x7b\x55\x98\xce\x02\x98\x7c\x24\x10\xb6\x61\x06\xbb\x8b\x43\x72\xd2\xf6\x6e\x5a\x60\x70\x5c\xa4\x75\xf1\x5a\x38\x08\x8d\x0a\x7f\x42\x5d\x4b\xce\x98\xa6\x64\xcb\xf9\xe8\x3d\xb5\x1f\x7f\xe0\x9c\x03\x33\x75\xb9\x42\xc7\x2e\x59\xae\x64\xac\xfc\xbd\xb8\xef\xb4\xb7\x00\x67\x07\xf4\xb0\xda\x3e\x85\xd8\x9f\x18\x28\x0f\xc6\x12\x08\x38\x54\xbc\xa1\x5b\x20\x85\xf6\xf8\x3f\x7a\x76\xc2\x14\x38\xdc\x37\x55\x7b\x12\x86\x1b\x86\xda\xe3\x35\xe3\xda\x57\x71\xd1\xb8\x3e\x8b\x87\x26\xe9\x46\x16\x37\xbc\xf0\xbd\x4d\xe4\x6a\xfc\xf5\xdc\x17\x71\xd4\xee\xcb\x79\xfb\x6f\x92\xfe\x17\x00\x00\xff\xff\x4c\x10\xbd\xe2\x5e\x0a\x00\x00")

func stubHtmlCreateStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlCreateStub,
		"stub/html/create.stub",
	)
}

func stubHtmlCreateStub() (*asset, error) {
	bytes, err := stubHtmlCreateStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/create.stub", size: 2654, mode: os.FileMode(420), modTime: time.Unix(1626666803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlDetailStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x6d\x6b\xdb\x30\x10\xfe\x9e\x5f\xa1\x69\x03\x27\x90\xc4\x69\x18\x65\x78\x96\x59\xc7\x3e\xac\xbf\xa1\x94\xa2\x58\x67\x47\xad\x2c\x09\xe9\x9c\x26\x04\xff\xf7\x21\xdb\x6b\xde\xdc\x66\x4c\x1f\x0c\xbe\x97\xe7\xee\x79\x74\xa7\x14\xa1\xb2\x8a\x23\x64\x23\x42\x08\x49\x85\xdc\x90\x5c\x71\xef\x19\x55\x7c\x67\x6a\xa4\x9d\xa3\x75\xca\xd9\xca\x01\x17\xb9\xab\xab\x15\x49\x3c\xee\x14\x30\xba\xaf\xb8\x2b\xa5\x4e\x48\xb4\xfc\x6a\xb7\x24\x7c\xa2\xe6\x28\xeb\x22\x73\x26\x11\xaa\x2c\x4d\x91\xaf\x14\x3c\x69\x5e\x41\x96\xa5\xf1\x65\xc4\x35\x04\x01\xc8\xa5\xfa\x30\xf3\xd4\x79\xc2\x24\x37\x1a\x41\xe3\x81\x86\xe5\x42\x48\x5d\xf6\x3c\xa2\x29\xa9\xa4\xfe\x0d\xb2\x5c\x63\x30\x7d\x5b\xb4\xb6\x15\xcf\x5f\x4a\x67\x6a\x2d\x12\x12\x7d\x2e\x8a\x62\x88\xaa\x33\xaf\x04\x77\x16\x18\x2d\x14\x6c\x29\x79\xae\x3d\xca\x62\xc7\xa8\x47\xee\x90\x12\xae\x64\xa9\x19\xad\xa4\x10\x0a\x28\x49\xca\x1a\x11\x1c\xa3\x37\xb7\x94\x6c\x66\x85\x71\x8c\x8e\x37\x5c\xd5\x30\x0d\xe2\x4c\x88\xd4\x44\xea\xc2\xd0\x0b\xc9\xa3\xe5\xc2\x6e\xc9\xe2\xa2\x87\x37\x8a\x8a\x78\xcb\x35\xa3\xcb\xa3\x5c\x84\x2d\xde\x85\x0e\x92\xc8\x05\x76\x21\x7b\xbf\x0f\x95\x9a\x26\xe8\x95\x1b\x75\x05\xed\x76\xa0\x5c\x1f\x24\xb5\xad\x91\x6c\x66\x95\x11\xa0\x18\x0d\x6d\x3f\x04\xe8\x47\xda\x5e\x71\xeb\x1e\x40\x1f\x2a\x1b\x8c\xce\xbc\x0e\xa9\x7b\xb5\x3f\x62\x8a\xc2\x03\x5e\x27\xfe\x1e\x8f\x55\x8d\x68\x74\x7f\x8b\x9d\xf8\x3f\x72\x25\xf3\x17\x46\x4b\xf3\x93\xe7\x2f\x34\x0b\xdf\x76\xbe\xda\xd0\xff\x25\xd5\x45\xb5\xa3\xd8\x6f\x60\x2c\xe4\x26\x1b\xa5\xf1\x61\x31\x53\x9f\x3b\x69\xb1\xef\x26\xd0\x88\x9f\xf9\x86\x77\xd6\x9e\x43\x65\x44\xad\x60\x0e\x5b\x6b\x1c\x7a\xc2\xc8\xfe\xad\x84\xe0\xc8\x13\x52\xd4\x3a\x47\x69\xf4\x78\x72\xe4\x0a\xc7\x01\xd6\x4e\x9f\x19\x5b\x87\xa9\x11\xee\x45\x42\x70\x2d\xfd\x5c\x8a\xe9\x45\x44\x10\x26\xb9\x4c\x0c\x2c\xd2\x67\xff\x14\x0a\x3f\x85\x98\xec\x52\x9d\x66\x34\xfc\xd7\x1c\xaa\x58\x67\xac\x4f\xc8\x43\x24\x45\xf4\x78\x30\x57\x80\x6b\x23\x7c\x72\xd6\xb1\xd4\x12\xef\xac\xfc\xd5\x3e\x0a\x1f\xd0\x0d\xa7\x25\xc4\xb7\xd2\xf8\xc1\xfb\x9f\x5b\xe3\x71\x1c\xc5\xdc\xca\xf8\xf4\x99\x8a\xbb\x37\x27\x9a\xee\xa5\x48\x2c\x77\x1e\xee\x35\x8e\x5b\xb8\x5e\xad\x49\x33\x19\xc6\xc4\x35\xe8\xb1\x03\x6f\x8d\xf6\xc0\xb2\x41\xd5\x3a\x22\xc5\x5b\xd8\x3c\x28\x38\xcf\x8d\x00\xf2\x89\x31\xb2\x5c\x2c\x86\xd8\x1c\x1f\xae\xc0\xe1\x59\x7e\xe5\xcb\xe1\x9e\xfe\x9e\x6e\x02\xde\x0d\x69\xde\xf5\x74\x83\xa1\x0b\x43\x18\x39\xad\x19\x3e\x83\x69\x67\xf2\x34\xa7\x43\xd5\xed\xd6\xbf\xdc\xde\x97\x56\x6f\x37\x2f\xcd\x78\x76\x33\xb9\x3e\x4c\xb9\x03\x8e\x20\x3e\x80\xee\xc9\x1c\x4d\xd1\x78\xf2\x7d\x74\x0a\xda\x8c\xd2\xb8\x5b\xbb\xec\x4f\x00\x00\x00\xff\xff\x27\x7a\xb2\x72\x39\x07\x00\x00")

func stubHtmlDetailStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlDetailStub,
		"stub/html/detail.stub",
	)
}

func stubHtmlDetailStub() (*asset, error) {
	bytes, err := stubHtmlDetailStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/detail.stub", size: 1849, mode: os.FileMode(420), modTime: time.Unix(1626666803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlEditStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\xcc\xb2\x05\x24\xa3\x8e\xed\x0d\x8a\x45\xa1\x5a\x42\xb7\x28\x8a\xee\x25\x3d\x6c\x6f\x8b\x45\x40\x8b\x23\x65\x12\x8a\x14\xc8\x91\xd7\x86\xe1\xff\x5e\x50\x72\x62\xc7\x92\x3f\xd0\x1e\x97\x07\x01\xe6\xcc\xbc\x99\xf7\x66\x48\x7a\xce\x58\xd5\x5a\x32\x66\x37\x00\x00\x73\x45\x4b\xc8\xb5\xf4\x3e\x15\x5a\xae\x6d\xc3\xa2\x33\xb4\x46\xba\x5d\x38\x94\x2a\x77\x4d\xb5\x80\xc4\xf3\x5a\x63\x2a\x36\x95\x74\x25\x99\x04\xa2\xbb\x9f\xeb\x15\x84\x4f\xb4\x3d\x88\xea\x45\xde\x12\x63\x95\xcd\xe7\x2c\x17\x1a\x1f\x8c\xac\x30\xcb\xe6\xd3\xbe\xc7\x25\x04\x54\xc4\x67\xe3\xde\x1a\xdf\xf0\xc8\xad\x61\x34\xbc\x27\x51\x4b\xa5\xc8\x94\x3b\x16\xd1\x18\x2a\x32\x7f\x21\x95\x8f\x1c\xb6\x7e\x99\xb5\x7b\x0b\x99\x3f\x97\xce\x36\x46\x25\x10\xfd\x50\x14\xc5\x10\x51\x67\xbf\x01\xaf\x6b\x4c\x45\xa1\x71\x25\xe0\xa9\xf1\x4c\xc5\x3a\x15\x9e\xa5\x63\x01\x52\x53\x69\x52\x51\x91\x52\x1a\x05\x24\x65\xc3\x8c\x2e\x15\xef\x3f\x08\x58\xde\x16\xd6\xa5\x22\x5e\x4a\xdd\xe0\x38\x48\x33\x02\x32\x40\xa6\xb0\xa2\x27\x78\x74\x37\xab\x57\x30\xeb\xd5\xf0\x4a\x51\x83\xaf\xa5\x49\xc5\xdd\x41\x2c\xe3\x8a\x3f\x86\x0a\x92\xc8\x05\x76\x21\x7a\xb3\x09\x99\xb6\xdb\xa0\x57\x6e\xf5\x05\xb4\x0f\x03\xe9\x76\x4e\x64\xea\x86\x61\x79\x5b\x59\x85\x3a\x15\xa1\xec\x2f\x01\xfa\xab\x68\x1b\xdc\x9a\x07\xd0\x87\xd2\x86\x4d\x67\xbf\x0d\xa9\x7b\xb1\x3e\xb0\x45\xe1\x91\x2f\x13\x3f\xc5\x63\xd1\x30\x5b\xb3\xeb\xa2\x6f\xf2\x1c\xbd\x17\xf0\x5b\xae\x29\x7f\x4e\x45\x69\x3f\xcb\x25\x8a\x2c\x7c\xdb\x11\x6b\xbd\xaf\x03\xeb\x3a\xb9\x47\xfa\x5d\xe6\xcf\x22\x0b\xdf\x73\x48\xd7\x29\xd4\x79\xb5\x73\xbd\x3b\xcc\x53\x45\xcb\xec\x66\x3e\xdd\x9f\xf1\xb9\xcf\x1d\xd5\xbc\xab\x26\x68\x32\x7d\x92\x4b\xd9\xed\xee\x04\xa9\xac\x6a\x34\x4e\x70\x55\x5b\xc7\x1e\x52\xd8\xbc\xa6\x50\x92\x65\x02\x45\x63\x72\x26\x6b\xe2\xd1\x81\x29\x2c\x87\xdc\x38\x73\xb4\xd9\x1a\x6c\xc3\xf8\x49\x25\xc0\x8f\xe4\x27\xa4\xc6\x3d\x8f\x20\x4c\xd2\x0f\x0c\x2c\xe6\x4f\xfe\x21\x24\x7e\x08\x3e\x59\x5f\x9d\x6d\x1f\x0d\x0a\x42\xad\xfc\x43\xa0\x39\x8c\x7a\x88\x7b\xe0\x3c\x00\x0f\xdb\x9b\xe1\x5f\x07\x79\x6b\x67\x6b\x9f\xc0\x97\x88\x54\xf4\x75\xbf\x5d\x21\x3f\x5a\xe5\x93\x23\x45\xc8\x10\x7f\xac\xe9\x0f\x64\x49\xfa\x8c\x9c\x61\xb5\x82\xc9\x15\x59\x3f\xc8\x62\x52\x5b\xcf\x71\x34\x95\x35\x4d\xdf\xde\xa8\x53\xd5\xc2\x47\xe3\x0d\xa9\xa4\x96\xce\xe3\x27\xc3\x71\x0b\xb7\xeb\xc6\x68\x3b\x1a\xc6\xe4\x47\x34\xb1\x43\x5f\x5b\xe3\x31\xcd\x4e\xe8\x17\x88\x14\xaf\x6e\x93\xa0\xe4\x24\xb7\x0a\xe1\x5d\x9a\xc2\xdd\x6c\x36\xc4\xe6\x70\x49\x8d\x8e\x8f\xe2\x2b\x5f\x0e\xd7\xf4\xb2\xba\x09\x3b\xe9\xb2\x3d\x69\xe9\x06\xcf\x14\x16\x52\x78\x9b\x33\x7c\x06\xc3\x8e\xe4\x39\x1a\xb3\xee\xec\x5e\xd3\xbd\x1f\x5b\xbd\xdd\xa4\xb4\xf1\xed\xfb\x0b\x98\xe1\x4e\xb9\x80\x49\x45\xfc\xae\xc5\x5d\xa2\xa3\x62\xfd\x67\x18\xde\x7f\xd6\x35\xc6\xa3\x53\x8a\x9f\x10\xad\x2f\xd6\x7f\x1f\xb6\xf0\x16\x47\xe3\x57\x91\xbf\xa3\xc1\xfa\x7b\xf1\x84\x39\x4f\xa4\xf7\x54\x9a\x78\x3f\x66\xe3\xfe\x94\x0d\x57\x70\x7e\xcc\x8e\x9a\xbc\x9f\x0d\x18\x1c\x8e\xc2\xba\x78\x29\x1d\x84\xb6\x84\x7f\x0e\xfb\x8e\x9c\x10\x8d\x8a\xae\xe6\x83\x3b\xb0\x7b\xb2\x21\x4d\x53\x10\xa6\xa9\x16\xe8\xc4\x39\xc9\xa9\x88\xc9\xdf\xcb\xfb\x3d\xf7\x0e\xe0\xe4\x38\xbe\xac\xae\x4f\xc1\xf7\x27\x01\xe4\xc1\x58\x06\x09\x2f\x19\xaf\xe8\x16\x14\x52\x7b\xfc\x3f\x97\xc1\x0b\x55\xb8\x6f\xb3\xf6\x28\x0c\x37\x0c\xb5\xc7\x4b\xc2\x79\x76\x64\xca\xb3\xc2\xf5\xab\xf8\xdc\x06\x5d\x59\xc5\x15\xe7\x79\x27\x13\xbb\x06\x7f\xbd\xfc\x88\xe5\x0e\x25\xa3\x3a\x73\xfd\xec\x0a\x3b\x78\xbd\xe2\xd1\x1e\xb8\x03\xdd\xde\xcc\xa7\xdd\xdf\x89\xec\xdf\x00\x00\x00\xff\xff\x31\x67\xa3\x32\x5c\x0c\x00\x00")

func stubHtmlEditStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlEditStub,
		"stub/html/edit.stub",
	)
}

func stubHtmlEditStub() (*asset, error) {
	bytes, err := stubHtmlEditStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/edit.stub", size: 3164, mode: os.FileMode(420), modTime: time.Unix(1626666803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlListStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4f\x8f\xdb\xb8\x15\xbf\xe7\x53\xbc\x70\x0b\xc8\x83\xf8\x5f\x82\x4d\x50\x68\x2c\x67\xdb\xcd\x16\xbd\x34\x58\x34\xe9\x5e\x06\x81\xc1\x91\x9e\x6c\x26\xb4\xa8\x92\xb4\x3d\xb3\x86\xef\x7b\xeb\xad\x40\x7b\xea\xa1\x9f\xa1\xa7\x7e\x9d\x2d\xd0\x53\xbf\x42\xf1\x28\x59\x96\x2d\xca\xd6\x0c\x8a\xb6\x8b\xe8\x30\x91\x45\xf2\xf1\xf7\xfe\xfd\xde\x23\x33\xb1\xb8\xcc\x25\xb7\x38\x7d\x02\x00\x30\x49\xc4\x1a\x62\xc9\x8d\x89\x98\xe4\xf7\x6a\x65\x59\x31\xe0\x06\xc5\xe0\x56\x23\x4f\x62\xbd\x5a\xde\x42\x68\xec\xbd\xc4\x88\x6d\x97\x5c\xcf\x45\x16\x42\xf0\xe2\xcb\xfc\x0e\xe8\x4f\xb0\xab\xad\x6a\xac\x1c\x08\x8b\xcb\xe9\x64\x62\xf9\xad\xc4\x59\xc6\x97\x38\x9d\x4e\x46\xcd\x19\x97\x24\x48\x61\xec\xd9\x75\xc7\x83\x47\x7a\xc4\x2a\xb3\x98\xd9\x83\x12\x39\x4f\x12\x91\xcd\x4b\x2d\x82\x3e\x2c\x45\xf6\x6b\x14\xf3\x85\xa5\x4f\x3f\x1f\xbb\x6f\xb7\x3c\xfe\x34\xd7\x6a\x95\x25\x21\x04\x5f\xa4\x69\xea\x53\x54\xab\x8d\xcf\x36\xe3\xfc\x0e\xc6\x10\xec\x18\xd8\xfb\x1c\x23\x96\x4a\xbc\x63\xf0\x71\x65\xac\x48\xef\x23\x26\x31\xb5\x27\xb2\x2a\xa8\xb2\x09\x33\x78\xee\xe4\x05\x7d\x8b\x77\xf6\x17\x52\xcc\xb3\x30\xd0\x84\x96\x36\x30\x39\xcf\xa2\xe0\x55\x00\xeb\x41\xaa\x74\xc4\xd6\x5c\xae\x10\x44\x06\x06\xb9\x8e\x17\xb3\x54\xa0\x4c\x8c\x67\x37\x7a\xb6\x5b\x37\x7d\xb7\xfb\xd7\xdf\xff\xec\x9d\x30\x11\x03\x91\xe5\x2b\x0b\xeb\xc1\x52\x25\x28\x23\x26\xb2\x54\xdd\xb8\x55\x1f\x18\xe4\x92\xc7\xb8\x50\x32\x41\x1d\x31\x06\x25\xf0\x8d\x48\xec\x22\x84\x17\xe3\x71\x7e\xc7\x9c\xb7\x9d\x0c\x8f\xc2\x23\xa7\xf1\x89\x55\x47\xce\xac\x3e\x53\xb7\x9a\xcc\x19\x81\x3d\x7f\xc1\xc0\xaf\x27\x05\xd4\xca\x5a\x95\x95\xfe\x48\x30\xe5\x2b\x69\x19\x7c\x15\x4b\x11\x7f\x22\xad\xd6\xea\x13\xfe\x92\xdb\x78\xf1\x06\x25\x5a\x64\x53\xf7\x03\x8a\x5f\x2e\xb8\x9c\x80\x8e\x4a\x78\xb1\x55\x8e\xf5\xf8\xb1\x1b\x6e\x32\xfe\x29\xe8\x77\xce\xcf\x6c\x5a\xfc\x7b\x0e\xe9\x03\x2c\xf1\xb5\x46\x4e\x46\x78\x8b\x9b\x07\xeb\xee\x77\xe0\xad\x6e\x78\xd4\x71\x02\x84\xb1\x92\xab\x65\x66\x22\x16\x2b\x39\xa3\x3c\x67\x10\x26\xdc\xf2\x88\x2d\xb9\xc8\x66\xf4\xca\x00\xbe\x52\xd9\xc0\xa0\xc4\xd8\x0a\x95\x0d\xe2\x05\xcf\xe6\x18\xb1\x82\x56\xaa\xef\xb3\xe2\xbb\x2f\xb7\xf6\xd4\x07\x46\x2a\x3b\x30\xb1\x22\xed\xb7\x5a\x6d\x28\x87\xa4\xb2\x64\x0a\xcb\x85\x9c\x15\xba\x3e\xc8\x21\x46\x7c\x8f\x11\x33\x4b\x2e\xe5\xa9\x21\xbf\x13\xb8\xe9\x69\xb5\xb9\x62\x53\x7a\x7d\xa8\x7b\x2e\xca\x7f\xe3\x40\x97\x3b\x14\x3f\xfe\xe3\x7b\x7c\x93\x08\x5b\xee\x40\xaf\x8f\x0a\x31\x7b\x41\x0b\xca\xb2\x4a\x8b\xcb\x29\x77\x5c\xc8\xea\x91\xe7\x22\xa2\x11\x6a\x39\x9f\x63\x99\x7f\xe6\xc0\xd4\x8e\xa8\x89\x44\x43\xab\x2c\x97\x11\xa3\x69\xef\xe9\x95\x41\x48\xef\x83\x02\x33\xbd\xbe\x13\xdf\x23\x03\xb3\x50\x9b\x01\x4a\x5c\x73\xab\x74\xf1\xcb\x2d\x2d\xe2\x73\x1f\x95\x65\x0e\xb9\x5f\xdf\xf2\x39\x32\x70\x2c\x48\x62\x1a\xc8\x96\x2a\xe1\xf2\x40\xaf\x6b\x81\x9b\xdf\xd0\x27\x06\xa1\xe3\xd1\x88\xbd\x1c\x33\xb0\xc2\x12\x73\xe4\x1a\x69\x82\xbf\x76\x50\x2d\xf2\x96\x1b\x63\xb9\xb6\x0c\x38\x31\x4e\xc4\x96\x22\x49\x24\x32\x08\xe7\x2b\x6b\x89\xb7\x9f\xbf\x62\xfb\xe2\xd1\x73\xc4\xde\x07\xaa\xd3\x57\x54\x44\x2a\x38\x6f\x5c\x16\x9e\x96\xba\xe0\xa5\x2b\x4c\x67\xe8\xeb\xc0\x80\xaf\x2e\x10\xe0\x76\x4b\xbb\xee\x76\xad\x7c\xda\x90\xf8\xfc\x45\xcb\xbe\xe0\xad\x5c\x4e\xb7\xb3\xf5\x08\xce\xd2\xb9\x97\xd6\x46\xa5\x07\x2f\xf9\x35\x71\x41\x5d\x7a\xb6\xf4\x66\x82\xd2\xe7\xc9\xbc\xe4\xa3\x05\xf2\x04\x75\x55\x55\x63\x25\x95\x0e\xbf\x48\x5f\x8d\xaf\xc9\x7c\x03\xe7\xce\x30\xc6\xcc\xa2\x6e\xb7\xbf\x88\x0f\x79\xae\xcc\x80\x72\x5d\x2f\x79\xc1\xa1\x42\xc7\x72\x6f\x90\xb8\x35\x9b\xc9\xd6\x65\x4e\x42\xac\xb2\x54\x94\xeb\x27\x23\x37\xe2\xb1\x53\xee\xf9\x48\xad\x66\xa9\x48\x67\xf4\xf9\xb4\xdc\x0f\x0a\xeb\xbd\xf6\x8a\x2e\xa7\xbe\x5f\x20\xa8\x1c\xb5\xc3\x56\x2e\x00\x8d\xb1\xd2\x09\xa4\x5a\x2d\xc1\x2e\x10\xa8\x96\xdc\x72\x83\x7e\x8c\xa3\x44\xac\xdb\xa0\x3b\x8f\xa4\x4a\x9d\x35\x76\x6b\x06\x62\x96\x9c\x0f\xd5\x8e\x41\x0d\x17\xe8\x5b\x72\x4d\x6c\x23\x55\x36\xaf\x18\xb6\x16\x79\x10\x41\xca\xa5\xc1\xeb\xda\x37\x4a\x6c\x88\x60\xbb\x63\xd3\xaf\x79\x16\xe3\xc5\xf2\x01\xe7\x92\xc4\xab\xd2\x97\x0f\xd4\x08\xb5\x56\xfa\x44\xa5\x93\xf6\xa4\x88\x8b\xb2\x6c\x5c\x31\xe8\x50\x34\x3a\x61\xf7\x26\x39\xf8\x83\xa3\x96\xfb\x17\x92\xff\xf6\xd0\x57\xfe\x64\x19\xa0\xde\x0e\xff\x1f\xf3\x40\x6b\x25\x3b\xf5\x81\x2b\x68\xd3\xea\x00\xf4\x50\x6a\x31\x25\xb7\x98\xcf\x9b\x5c\x4e\xad\x5a\x31\x8c\xcf\xdc\x25\xcd\xfc\xf8\x87\x3f\xfe\xe3\x6f\x3f\xfc\x84\x68\xa6\x76\x2c\x74\x5c\xf3\xe3\x0f\x7f\xf9\xe7\x9f\xfe\xfa\xbf\xe2\x9a\x63\xd9\xee\x66\xa3\xbc\xce\x29\x96\xd5\x9b\xe3\x89\x89\xb5\xc8\x6d\xa9\x30\x25\xdc\xe8\x23\x5f\xf3\xe2\x6b\x69\xae\xa5\x4a\x56\x12\x87\x78\x97\x2b\x6d\x0d\xf9\xa8\xda\x82\x22\x3a\x84\x74\x95\xb9\xc3\x55\xef\xaa\x36\x44\x8f\x46\xbb\xd2\xd9\xc9\x47\x27\x72\x7f\x6e\x0b\xe1\xe6\x43\xbf\x31\x5c\x75\xd9\xe1\xd8\x3f\x48\xbd\xb6\x6f\xac\xea\x46\x43\x17\x64\x67\x26\x50\xb8\x85\xdb\x5d\x73\x46\xad\xf2\xb5\x09\x39\x29\x8e\x21\xf8\xe4\x9c\xc6\x77\x9b\x30\x5f\x1e\x84\x3e\xa3\xec\x0f\xbf\x21\xdc\xf8\xaf\x6a\xc8\x87\x61\x50\x1d\x75\x83\x7e\x71\xcd\xf2\x6a\xdc\x2f\x38\x34\x28\x48\x34\xf0\x80\xa5\x67\x32\xf9\x68\x9c\x4f\x66\xc5\x79\xdb\x6d\x36\x6d\xb9\x16\x72\xe5\x29\x0c\x0a\xd2\xc3\xa0\xef\x28\x2a\x0c\x8e\x4e\xc8\x41\x1f\xf6\x17\x3d\x2f\xc7\xbb\x86\x1c\x8f\x8a\x5a\xad\xac\x3b\x0f\x85\x76\x21\xcc\xd0\x9d\xc9\x5e\x1f\x5e\x43\x08\x82\xe6\x22\x62\x20\xaf\x27\x8f\xee\xb7\xda\xac\x56\x53\xfb\x68\xbe\x47\x71\x0f\xe0\x62\xee\xcc\x59\xbe\x19\xe5\xc7\xe2\x6b\x73\x3d\xc2\x8f\xed\x73\xf8\x55\xd3\x2b\xd7\x2a\x27\x3d\x02\x32\x46\x50\x43\xb3\x44\xbb\x50\xa4\xe2\x31\x04\x77\xd0\x7d\x73\x3e\x43\xe9\x59\x73\x5d\x24\x95\xd5\x10\x81\x33\x77\xe5\x08\x78\x0d\xc1\x6b\x1a\x8c\x82\x67\x27\x23\xe4\x8d\xeb\x27\x4d\x77\xa4\xbd\xa7\x6e\xe6\x1a\xb5\x48\xef\x7f\x45\x5a\xbf\xbf\xcf\xb1\x77\xe5\xdb\x1b\x2a\x96\xf0\x58\xa4\xf1\xc9\xc9\xe5\x77\x42\x19\xaf\xa0\x61\xae\x8c\xed\x05\x23\x9e\x8b\xd1\xf1\x85\xf2\x88\x62\x39\x78\x56\x6a\xd9\x77\x72\x28\x6e\xae\xfc\x72\xec\x02\xb3\x9e\x46\x93\xab\xcc\x60\x34\xf5\xc3\x2e\x95\xdd\x4f\x1b\x92\x93\x87\xb1\x4a\x10\x9e\x46\x11\xbc\x18\x8f\xdb\xf4\xdd\x3f\x5c\xa2\xb6\x27\xeb\x97\x66\xee\xc7\xb4\x7f\x5a\x8c\xb5\x7f\x9a\x69\xb6\x7f\x9c\xce\x15\xef\x42\x04\xc7\x1b\xbb\x3f\x64\x25\x3f\x39\x54\x12\x2a\x6a\xf6\x4b\xc8\xf9\x5c\x64\xae\x0d\x1a\xba\x6b\x8f\x59\xb6\x5a\x9a\x0e\x22\x89\xd0\x2f\x4a\xa4\x89\x33\xaa\xc6\x5e\x79\xbb\x63\xc3\x9d\x10\xc2\xe9\x8d\x4b\x2d\x27\x48\xac\xcf\x57\x0e\xdc\xcf\x5c\xc0\xeb\x61\xbe\x32\x8b\xde\xf6\xf7\x2b\xd4\xf7\xe1\x96\x56\xb8\xeb\x9f\x5d\x97\x4d\x8b\x7b\xd7\x0b\x49\x78\x92\x5c\x11\x3c\xbf\xf6\xcf\xa9\xb2\xba\x77\x75\x7d\x79\xef\xe2\xc2\xaf\xb6\xb7\x56\x1b\xdf\xf6\xa3\x11\xb5\xec\x46\x49\x74\x79\xd1\xab\xe9\xde\x8c\x47\x8f\x61\x72\x6e\x17\x61\x70\x9a\x75\x45\x39\x08\xfa\xa5\xd9\x44\x12\x6a\xb5\x19\x8a\xa4\x93\xd9\xbe\x49\x84\xbd\x0c\xbc\x33\x16\x4c\x84\x7d\x24\x92\xe2\xae\xbb\x8b\x03\xbb\x00\x89\x9d\xb4\xa0\xcb\xc6\x45\x5b\xd0\xc9\x7b\xae\xf7\xf3\x83\xaa\xb5\x2b\x91\xd5\xab\x66\xf6\x9c\xce\x2a\x5b\x71\xad\x36\x9e\x26\xa4\x16\x24\x84\xa6\x83\xf5\xea\x47\xf1\x2e\x46\x7c\x14\xc1\x17\xf0\x83\x3e\xb9\xd6\xa7\x0f\xf9\xfa\x73\x63\x7b\xcf\xc5\x4e\xe7\x05\xd5\x71\xec\xfc\x8a\x1a\x1b\x3d\x9a\x94\xbf\x13\xb8\x09\x3b\xe5\x79\xd5\xbd\x53\x9f\xd2\x1a\xc9\x47\x3d\xbe\x27\x8e\xbd\x20\x6a\x47\xb8\x0b\x31\x2a\xd2\x82\x1d\x7d\x8d\xfb\x50\x62\x36\xb7\x0b\x88\x22\x68\x0d\x88\x22\x10\x82\x6f\x25\x72\x83\x50\xb4\xeb\x20\x2c\x2e\x0d\xa4\x42\x1b\xfb\x34\xb8\x6a\x52\x3f\x54\xc1\xd0\x1c\x6b\xba\xc8\x8b\xaf\x99\xfb\xe7\xd2\xb5\xbb\x3d\x1e\x9f\xb3\x0e\xe1\x6c\x9f\xb9\xad\x46\xfd\xdc\xd2\xb6\xed\xca\xe4\x61\xab\xfe\x2b\x09\xec\xff\xdf\x55\xca\x61\xd3\x1a\x2a\x2d\x40\x6f\x3e\x34\xfb\xfd\x54\x69\xe8\xd1\xf1\x44\x80\xc8\xa0\x4d\xea\x59\xc9\x45\x29\xa6\xa5\x37\xe2\xc3\x50\x24\x4d\x2d\x77\xe7\x14\x3c\x39\xc4\x1c\x52\x01\xbc\xb9\x90\x2a\xed\xf0\x52\x80\x13\xe4\xc3\x41\xa3\x05\xf7\x9e\x4c\x6a\x87\xc3\x1b\x5a\xfc\x01\xa2\x28\x02\x96\xad\x96\xb7\xa8\xd9\xb9\x20\x15\x69\x4f\x98\xb7\xfc\x6d\xaf\xda\xab\x10\xd0\x7a\xdc\xda\x3f\x45\x64\xd3\xdc\x67\x0c\x84\x81\x4c\x59\xe0\xb0\xdf\xb1\x43\x7c\x5f\x88\xca\x0b\x81\x77\x40\x0a\x11\xbc\x75\xbb\x36\x54\xf0\x47\x24\x4a\x83\x97\x0c\x67\xac\x16\xd9\xfc\xac\xe1\x9a\x28\xde\xb9\x45\x1d\x51\x74\xa0\xe1\xd2\x4c\xc4\xbb\xd7\x97\x8f\xf7\x45\x5f\x98\x9c\x61\xdb\xf6\xfe\xbf\x26\xe6\x16\x53\xa5\xf1\xb7\xd4\x87\xfe\x2e\x4f\x8e\xfb\x56\xab\xfa\xc5\x6d\x74\x3f\xc3\x3b\xeb\x15\x5f\x3f\x82\x58\x35\x74\xfd\xb2\x3b\x78\x75\x44\x42\x0f\x09\xaf\xd1\x49\xa1\xed\xee\xc9\x64\x54\x5c\x2b\x4e\x9f\xfc\x3b\x00\x00\xff\xff\x4b\xc7\x1a\x32\x67\x26\x00\x00")

func stubHtmlListStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlListStub,
		"stub/html/list.stub",
	)
}

func stubHtmlListStub() (*asset, error) {
	bytes, err := stubHtmlListStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/list.stub", size: 9831, mode: os.FileMode(420), modTime: time.Unix(1626666803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubLayoutDefaultStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x4c\xd9\x02\x4a\x8a\xc8\x72\xd2\x3d\xb1\x92\x80\x05\x7a\x6d\x51\xf4\x1a\x04\x0b\x5a\xa4\x24\x22\x14\x29\x90\x94\x92\xd4\xf0\x7f\x5f\x90\x92\x6d\x7d\xda\x8e\x0e\x81\x35\x9c\x79\x33\x7c\xf3\x38\x54\x62\x63\x3f\x05\x03\x93\xa9\x9a\xd1\xf4\x0e\x00\x60\x23\xc8\xa7\x6a\x6c\x28\x49\x0b\x7b\x6f\x71\xcf\x3b\xa7\xb6\xc4\xf0\xed\x79\x5b\x7f\xfc\x79\xb2\x56\x44\x17\x5c\x62\xd8\x02\x69\xac\x9a\xda\x43\xcd\x8b\xd2\x62\x18\xc7\x64\x4a\x28\x8d\xe1\xbd\xe4\x96\x75\xd6\xc3\xdd\x28\xb1\x50\x85\x1a\x64\xde\x29\x4d\x99\x0e\x35\xa1\xbc\x31\x18\xfe\x18\x62\xe5\x42\x11\x8b\x41\xb0\xdc\x1e\xa1\xe2\xc8\x6f\x29\xbd\x8b\x2d\xab\x6a\x41\x2c\xeb\xb6\x15\x53\xde\xa6\xa7\xc0\x98\x87\x5d\xb6\xb3\xa9\x37\x97\x8c\x50\xa6\x01\x7b\x94\x04\xed\x77\x24\x7b\x2b\xb4\x6a\x24\xc5\xc1\xaf\xdb\xed\x36\x38\xa0\x71\x4c\x1f\x57\x31\xd9\x40\xa5\x28\x4b\x50\xa9\x34\xff\x5f\x49\x4b\x04\x02\x5b\xb2\x8a\x25\x88\x12\xfd\x86\x80\x64\x96\xb7\x2c\x94\xc4\x99\x9e\xd0\xc5\x24\x30\xcf\xe2\x33\x95\xcf\x90\x09\x62\x4c\x82\x06\x74\x21\xe8\x91\x3a\x72\x3b\x6e\x51\x1a\xc7\x96\x5b\xc1\xd2\x34\x8e\xca\xe7\x15\x3c\xca\xdb\x09\xa0\x24\xed\xc2\x16\xbd\x73\x34\x22\xf1\x6c\xee\xb6\x3f\xe1\x32\x3a\x92\x39\xe3\x78\x89\xfa\x7e\xc9\x70\xc7\x7e\xc9\x29\x0b\xad\xe6\x45\x31\x6c\x05\x94\xac\x13\x54\xf0\xb4\xdd\xb6\x65\xf0\x38\xa2\x2d\xcf\xf3\xc5\xde\x0c\xfb\xd3\x77\x43\x38\x18\xd4\x69\x3a\x41\x4e\xba\x08\xf0\xa8\x39\x05\xb3\xdf\xfd\xfb\x3f\xa4\x62\x08\xb0\xaa\x99\xf4\x4b\x26\x41\x2f\xc1\x53\xf0\xba\x92\xc8\x27\x3b\x0a\x0f\xda\x30\x57\x3a\x41\xdc\xb2\x0a\xb8\x04\x57\xc2\x5a\x5f\x27\x95\x86\x3e\xa6\x0d\x79\x9e\x20\xfb\x59\x33\x95\xdf\x3b\xcb\xc6\x34\xbb\x1f\x6e\xfd\x01\x92\x04\x82\x46\x52\x96\x73\xc9\x68\x80\x00\x77\x85\x7b\x2f\xf7\xf3\x42\x81\x83\x5c\x3c\x53\x12\xb0\xcb\xd0\x87\x3a\x03\x4a\x5d\xef\xdc\xaf\x1b\x30\xb4\x6a\x2c\xd3\xa1\xe0\xf2\x0d\xb0\x55\x9e\xba\xff\x9c\xed\x5f\x62\xcb\xfb\x53\x39\x0f\x08\x2c\x29\x12\x64\x6a\x22\x51\xba\xdf\xfb\x05\xaf\xce\xc3\x21\x8e\x06\x20\x57\xe8\x89\x06\xfc\x5c\x65\xd2\x34\x3b\xdf\xf6\x4b\x3c\xfe\x32\xe1\xf1\x78\x38\x6f\xd8\xfa\xa9\xcf\x46\x28\x9b\x20\xbf\x9b\x1b\xe2\xe0\x36\xea\xc7\x1c\x5d\xaf\x26\x1a\xcf\xbb\x2b\xd9\x87\x22\xf3\x22\x35\xcd\xce\x69\x74\xc4\xce\x49\x55\xa6\xd9\xdd\x2a\x2a\xb8\x2e\x8a\x23\xda\x54\x13\xce\xfe\x75\x49\xc0\x17\x65\x11\x9d\x74\x71\xe1\x08\x5f\x21\x73\x79\xe2\x9d\xe0\xf9\x6c\xe8\xc1\x70\xf0\x9d\x27\x5a\x4d\x28\xe5\xb2\xc0\x10\x6c\xe1\xf9\x5b\xfd\xe1\xff\xac\x4f\xb1\x9e\x93\x96\xb3\xf7\xf4\xc4\x90\x7f\x5b\xac\x63\xf1\x86\x5b\xb0\x4f\x6d\xfd\x98\x1f\x92\x10\x9b\x4c\xf3\xda\xa6\xdd\x4d\x5d\x29\xda\x08\xb6\x61\x1f\xb5\xd2\xd6\x40\x32\xb8\xad\x29\xb1\x04\x43\xde\xc8\xcc\x72\x25\xe1\xfe\x61\xb0\xe6\x1e\xcd\x6c\xa3\xe5\xc4\xe8\x9e\x28\x82\x4c\xc9\x9c\x17\x50\x08\xb5\x23\xc2\x4f\x4b\x10\xdc\xd8\x99\xab\x5b\xc1\x2f\x73\x08\xf7\xb8\xa3\x83\x21\xe0\xca\x84\x35\x53\xb5\x60\xc1\xe3\xa2\x9f\xd7\x19\x86\xe0\x6f\x26\x9b\x15\x97\xe3\x29\xc0\x2f\xab\x3a\x89\x22\x08\xc3\x30\x74\x20\x26\xfc\x4e\xa9\x7b\x09\x2f\x79\xff\xa5\x40\x2a\xeb\x08\xe4\xf9\xa7\xbb\x8e\xdc\x2b\x33\x10\xcc\x61\x82\x45\x9c\xd7\x99\xf5\xf0\xfa\x78\x77\x9d\x4d\x2f\x16\x33\xf3\xeb\xcc\x18\x56\xd8\xac\x89\xfb\xe8\x0b\x7e\x5f\x61\x48\x33\xca\x35\xcb\x2c\x86\xbd\x3b\xcf\x18\x82\x38\xa6\x2c\x27\x8d\xb0\x3f\x3c\x72\x9a\x06\xf3\xc9\x75\x98\x83\xf5\x3c\xfa\x11\x71\x81\xc8\x6b\x04\x4e\xe2\xe7\x0c\x8e\xd9\x3b\x97\x36\x28\x29\x53\x55\xdd\x58\x46\xf1\x44\xa3\xa3\x2f\x82\xb3\xc2\x67\x02\x3f\x73\xe3\x85\x6e\x4b\x6e\x36\xbf\x79\x32\xfc\xcc\x9b\xb3\xb1\x54\x44\xc5\x6c\xa9\xa8\x59\xa8\xe1\x34\x45\x07\x25\xf8\x59\xba\x50\x46\x4b\x74\xdf\x60\x48\xba\x42\x56\x54\x90\x2b\x0d\xf7\xce\x9b\xbb\x2b\xa0\x73\x5a\xdb\x17\xcf\x7d\x3e\xf7\xfd\xd1\x39\xbe\xf0\xd7\xcd\x5a\x05\x13\x32\xce\x01\x4e\x58\x8b\xde\x0b\x72\x99\x8b\xb6\x43\x0b\x82\xb5\x6e\x9e\xff\x15\xe8\xa7\xd6\xcf\x00\x00\x00\xff\xff\x99\xaa\x8c\x54\xe7\x0c\x00\x00")

func stubLayoutDefaultStubBytes() ([]byte, error) {
	return bindataRead(
		_stubLayoutDefaultStub,
		"stub/layout/default.stub",
	)
}

func stubLayoutDefaultStub() (*asset, error) {
	bytes, err := stubLayoutDefaultStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/layout/default.stub", size: 3303, mode: os.FileMode(420), modTime: time.Unix(1626666803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubMainStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x6a\xf3\x30\x10\x84\xcf\xda\xa7\xd8\x5f\xf0\x17\x1b\x4c\x28\x3d\x05\xe3\xe8\xd2\xb4\xf4\x58\x1a\x7a\x0e\x8a\xbd\x76\x45\x1d\xc9\xac\xe4\x34\x10\xfc\xee\x45\x96\xd3\x64\x6f\x33\xdf\xcc\x22\xed\xa0\xeb\x6f\xdd\x11\x9e\xcf\x00\xe6\x38\x38\x0e\x98\x81\x90\x55\x95\xc4\xbe\x76\x4c\x4a\x49\x10\xb2\x77\x9d\x84\x1c\xa0\x1d\x6d\x8d\x47\x6d\x6c\x96\xe3\x05\x40\x10\x96\x1b\x8c\xb1\xd5\x8b\xed\x8c\xa5\x0b\x08\xf1\xec\x6c\x6b\xba\x12\x1f\x66\x3f\xa9\xe8\x8b\xad\x0e\xfa\xa0\x3d\x5d\xd1\xf6\xb0\xa3\x30\x13\xf1\xe6\x7c\x28\x31\x8e\xac\xaa\xe6\xb0\xff\x72\x3e\x28\x25\x8b\x19\x7e\x7a\xe2\x7b\x38\x7a\xe2\x3f\xf8\xae\xbd\xff\x71\xdc\x94\x0b\x1c\x16\x7d\x0b\x38\x5e\x56\x27\xee\x38\x28\x95\xd0\xed\x41\xa9\xdb\x2c\xfa\xda\x9d\x0a\xc0\xbb\xd9\x11\x9f\x88\xd3\xbe\xf5\xe3\xfa\x29\x66\xa6\x02\xc4\x14\x0f\xc1\x1c\x4f\x41\xab\x8f\xd1\x66\x39\x08\xd3\x62\xb4\xfe\x6d\xd0\x9a\x1e\xe3\x27\x7b\xd7\xad\x5e\x75\xd0\x7d\x9b\xc9\xff\x27\x59\x44\x9e\xc7\xf2\x04\xbf\x01\x00\x00\xff\xff\x87\xee\x39\xb2\x88\x01\x00\x00")

func stubMainStubBytes() ([]byte, error) {
	return bindataRead(
		_stubMainStub,
		"stub/main.stub",
	)
}

func stubMainStub() (*asset, error) {
	bytes, err := stubMainStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/main.stub", size: 392, mode: os.FileMode(420), modTime: time.Unix(1626681583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubModelModelStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stubModelModelStubBytes() ([]byte, error) {
	return bindataRead(
		_stubModelModelStub,
		"stub/model/model.stub",
	)
}

func stubModelModelStub() (*asset, error) {
	bytes, err := stubModelModelStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/model/model.stub", size: 0, mode: os.FileMode(420), modTime: time.Unix(1626666803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubResponseResponseStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4f\xc3\x30\x0c\x85\xcf\xcb\xaf\xb0\xfa\x33\xb8\xc2\x11\xd0\x04\xdc\x57\xab\x35\x91\x61\x75\xa2\xd8\x39\xb0\x69\xff\x1d\x39\x6b\xa7\x4c\x5a\x4f\xcd\x7b\x9f\xfd\xf2\x92\x71\xfa\xc5\x48\x50\x48\x73\x12\xa5\x10\xec\x2f\x13\x7c\x90\x81\x5a\xa9\x93\xc1\x39\xec\x9e\xd3\x4c\xc0\x62\xb0\x7d\xe3\x8f\x26\x79\x1a\xa6\x34\xd3\x30\x86\xdd\x9b\x46\x70\x9c\x25\xde\xf9\x8b\x46\xb7\x5f\xd0\xd0\xc7\xa9\x7c\xe3\x44\xe7\xcb\x66\xcf\x68\x38\x8c\xe1\xb2\x66\xbe\xb2\xf6\xa1\xed\xf8\x60\xea\xc8\x6a\xbe\x75\x8f\x91\x05\x8d\x93\x40\xf7\xbb\x42\xf9\xa6\x74\x01\x1d\xd6\x75\xab\xa5\x90\xd8\xde\x1f\xc1\x2b\x6e\xd5\xae\xf2\x21\x63\xa4\x35\x8d\x3e\xf9\x44\xde\xae\xc3\xdc\x3e\x28\x9f\x1a\xf3\x95\x0c\x8f\x0e\xea\x1d\x63\x2e\xb7\x45\x7a\xa3\xde\xeb\xa2\xf0\x80\x92\xba\x68\xbb\xf1\x7f\x00\x00\x00\xff\xff\x2f\xbd\xad\x10\x98\x01\x00\x00")

func stubResponseResponseStubBytes() ([]byte, error) {
	return bindataRead(
		_stubResponseResponseStub,
		"stub/response/response.stub",
	)
}

func stubResponseResponseStub() (*asset, error) {
	bytes, err := stubResponseResponseStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/response/response.stub", size: 408, mode: os.FileMode(420), modTime: time.Unix(1626666803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubRouteRouteStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x4f\x6f\xe4\x48\x15\x3f\x57\x7d\x8a\x47\x49\x20\xf7\x8c\x63\xdf\x9b\xc9\x48\x4b\x92\xf9\x83\x76\x46\x21\x3d\xec\x4a\xcc\xcc\x66\xaa\xed\x67\xbb\x76\xdd\x55\xa6\xaa\x9c\x9e\xce\x2a\x17\x84\x04\x48\x08\xb8\x2c\x42\x42\x42\x48\x1c\x38\x01\x73\x42\x48\x03\x7c\x9a\x49\xe0\xc6\x57\x40\xaf\xca\xed\x74\xfe\x88\xed\x90\x43\xdc\x7e\xf5\xde\xef\xfd\x7f\xaf\x9c\xe7\x30\x5b\x1a\x5b\xc2\x52\xb5\x2d\x14\x0d\x16\x5f\x80\xaa\xc0\x9a\xde\x23\x54\xaa\x45\x50\x0e\x0a\x8b\xd2\x63\x99\xd2\x09\xbe\x55\x2e\xfc\xde\x10\x5b\x98\x52\x55\x2b\x50\x9e\xe7\x39\x3c\xad\x60\x65\x7a\x58\x4a\xed\xc1\x1b\xb0\x38\x48\x83\x6f\x30\xe2\xa6\x74\xee\x1a\xd3\xb7\x25\x94\xd8\xa2\xc7\x70\x46\xda\x52\xa9\x03\xa3\x86\xde\xe1\xa0\xa2\x46\x8d\x56\x7a\x04\x59\x4b\xa5\x53\x30\x36\x28\x28\xa4\x86\xc2\x74\x2b\xa8\xac\x59\x04\x80\x37\xce\xf7\xf3\x3c\xa8\x88\xff\x33\x22\xbc\x09\xc0\x9c\x4c\xdb\x37\xa0\x8d\x5f\x9b\x4b\x22\xda\x78\x74\xf0\x66\x67\x67\x67\xe7\x88\x24\x76\xe6\x58\x2b\x4d\xaf\x6f\x48\xcf\xc6\x01\xea\xf2\x2a\xf9\xe9\xa2\x33\xd6\x07\x1a\xe7\x9d\x2c\xbe\x90\xf5\xe0\x1f\xe7\x2a\x9c\x41\xc2\x99\x28\xcc\xa2\xb3\xe8\x5c\x5e\x9f\xaa\x4e\x70\x26\x50\x17\xa6\x54\xba\xce\x3f\x77\x46\x13\xa1\x5a\x78\x7a\x28\x93\x2b\xd3\x7b\xd5\xd2\x4b\x6b\x6a\x7a\x68\xf4\x79\xe3\x7d\x90\x73\xde\x16\x46\x9f\x08\x0e\x00\x40\x6f\x4a\xd7\x4e\x70\xce\xc4\x83\x07\x51\xdf\xb1\x45\xd7\x19\xed\xf0\xe1\x43\xb1\x49\x2e\x8c\xae\x54\x1d\x88\x79\x0e\x57\x6d\xe7\x13\xce\xfd\xaa\x43\xa8\x7f\xa0\xba\x4f\xad\xf2\x68\xc1\x79\xdb\x17\x1e\xbe\xe4\xac\x3e\x85\x7b\x64\x77\x16\x4f\x38\x23\x63\xb2\xa3\x41\xcd\x40\x3c\xe3\xbc\xea\x75\x01\x49\x0f\xf7\x2e\x51\x26\x10\x9e\x49\x07\x2f\x5f\xcf\x57\x1e\x27\x90\x28\xed\x53\x40\x6b\x8d\x9d\x10\xb8\x45\xdf\x5b\x0d\x7d\x56\x9f\x66\x03\xef\x64\x04\x3b\xc2\x9a\xea\xcc\x26\x81\xb5\x81\xe9\x2e\x04\xdd\xcf\x71\x39\x43\x7b\x82\xcf\xfa\xb7\xc9\x24\xf8\x33\xf3\xd2\xab\x22\x26\x99\x35\xd9\x13\xa9\xcb\x16\x13\x91\xd7\xe6\xd8\x51\xfd\x1c\x77\xfd\xbc\x55\x45\x2e\xd2\x88\x30\xf3\x56\x75\x87\x16\x2b\xf5\xf6\x56\x2e\xce\xa2\x97\x8f\x54\x8b\x41\x95\x4d\xc2\xfb\xbe\xb2\x89\x78\xf0\xc0\x1a\xe3\x8f\x3b\xe9\x9b\x87\x0f\x73\x8b\xce\xf4\xb6\xc0\xbc\x54\xce\x8b\xc9\x64\x12\x2d\xda\xc7\x4a\xf6\xad\x07\xa5\x4b\x7c\x9b\x35\x7e\xd1\x5e\x1a\xf6\xa8\xd7\x45\x22\xc8\x18\x72\x33\x59\xc2\x2d\x11\x4d\xc1\xc2\xbd\x81\xfe\xc3\x1e\x9d\x0f\x31\x60\x79\xbe\xe1\xea\x50\x69\x8c\x35\x01\x76\x8c\xcf\xff\x61\x35\x67\x6c\x99\x3d\x41\x59\x52\xb4\xb3\x19\xfa\x44\xec\x19\xed\x51\xfb\x9d\x83\xa1\x56\x45\x0a\x22\xd4\xef\x84\x73\x46\x55\x31\xdd\x85\x50\x17\xcf\x71\x19\x6d\x4e\x96\x84\xa3\xd7\xaf\xc4\xf0\xad\xcb\x62\x20\xf3\x59\x7d\x3a\x85\xcd\xbf\xfa\x94\x62\xcd\xae\xfa\x3e\x85\x25\x51\xcf\x38\x63\x25\x56\x68\xa1\x3e\xcd\xf6\x5a\xe3\x90\xb2\x3d\x38\x9b\x05\x07\x9f\xbc\x78\x71\x98\x8c\x0a\x53\xb0\x13\xce\xce\x62\x02\x8e\x50\x97\x68\xe1\x93\x1e\x81\xa2\x0f\xd4\x83\x46\xa3\xf6\x37\xf2\x60\x03\xa7\x48\x21\xfe\x98\x8c\x1d\x72\x6d\x1a\xf0\x88\x1b\xa6\xa2\x97\x35\x48\xe7\xd0\x1f\x57\xaa\xf5\x68\x3d\x2e\xba\x56\x7a\xbc\x01\x2e\x3b\x95\xdf\xc6\x98\xb7\x14\xf8\x14\xa2\x37\x07\xd4\x10\xc9\x6d\x7c\xd9\xc7\xca\x79\xca\xcf\xb6\xb8\x71\x98\x6e\x83\xbc\x1f\x38\xef\x86\xed\xa5\x6a\xb7\xc3\x26\xce\xbb\x60\xc7\x0d\xb1\x0d\xf6\x5e\xe0\xbc\x0b\x36\x96\x6a\xab\x58\x1f\x94\xea\x4e\xb1\x9e\x4b\x5f\x34\xc7\xdb\x47\xfc\x3b\xc4\x3f\x86\xfd\x5a\x9d\x0d\xcb\x85\x73\x56\x9b\x38\x18\x62\xcb\x7f\x8a\x6d\x61\x16\xb1\xf6\xd1\xda\xb1\xcb\xa9\x30\x50\x7f\xa4\xcb\xd0\x09\x49\xb5\xf0\xd9\xac\xb3\x4a\xfb\x2a\x11\xd3\x6f\x9e\x88\x14\xe2\xcc\xcf\x1e\xb7\x66\x2e\xdb\x03\x5d\x2b\x8d\x7b\x91\x14\xa7\xc3\xa1\xb1\x7e\x92\x42\x43\xc8\xb4\xd5\xad\x85\x6f\xec\x82\x56\x6d\xd0\xcb\x3a\xa9\x55\x91\xa0\xa5\x8e\xa0\x66\x3c\x4b\x2e\x47\xf3\xa6\xab\xcd\xdd\xc6\xd8\x30\xfc\xff\x87\x0c\x67\xb7\xcc\xbe\x71\x57\xdc\x79\x66\xc6\x19\xb2\x11\xd1\xb5\xb3\xd3\x5d\xba\x99\x18\x9a\x93\x93\x6f\xdf\x70\x9f\x2d\x5c\x9d\xc2\x31\x71\xd1\x96\xce\x9e\x49\xeb\x1a\xd9\x26\xeb\x05\x9b\x1d\xa1\x8f\x8c\x6c\xcf\x94\x38\x5d\x6f\x16\xe9\x7b\xf7\x54\x7b\xb4\x5a\xb6\x31\xce\x21\x4c\x69\x64\x7d\xe6\xea\x29\xc0\x95\x64\x85\x5c\x51\x98\x23\xcb\x59\x98\xaf\x8c\xb5\xa6\xce\x0e\xd7\x2c\x4e\xa4\xb0\x70\xf5\x24\x9c\x2c\x87\x55\xb9\x26\xd0\xa0\xa4\xe4\x6c\x14\x48\xb2\x8c\xc3\xf0\xb6\xbc\x5e\x01\x5e\xeb\xe6\x77\x71\x78\x7b\x7f\xbf\xd6\xdd\xb3\xa0\xf9\x9a\x47\x54\x6c\x63\xa9\xc5\xa9\x9c\x2c\xe3\x4e\xb9\x3d\xed\x31\xdd\xb7\x24\x3f\xcf\xe1\xdf\x7f\xfc\xc3\xc5\xef\x7e\x75\xfe\xcb\x1f\x5d\x7c\xf5\xee\x3f\x7f\xff\xf9\xc5\x6f\x7e\x7f\xfe\xee\xc7\xe7\x3f\x7d\x77\xf1\xeb\x9f\x7c\x78\xff\x57\xce\xc6\x4a\x08\x52\xd9\xa1\xb4\x0e\x1f\x19\xbb\xa0\x86\xbb\x19\xbd\xb1\x29\xb2\x58\xfc\x34\x2e\xce\x38\x67\xb4\x57\x37\x61\x08\xe1\x13\xd9\xf6\x98\x08\x3a\x12\x11\x2c\x70\xed\xee\x82\x10\x1b\x60\x82\x56\x5b\x3c\xea\xa4\x95\x0b\x31\x40\xe6\x39\x7c\x78\xff\x8b\x13\x85\xcb\x7f\xfd\xf6\xcf\xe7\xff\xf8\xea\xc3\xdf\xfe\x74\xfe\x97\xf7\x17\x3f\xfb\xe7\xda\xf2\xb9\x29\x57\x51\xa7\x2c\x69\xe7\x5f\x5f\xf2\x24\x2a\xe0\x7e\x84\xbe\x0f\x22\x5c\x43\x08\xfd\x38\x24\x00\x76\x21\x06\x75\x08\x3e\xc1\x51\x11\x6d\xeb\xf4\x65\x82\x06\xf5\x41\x4f\xbc\x94\x4e\x86\x1b\x1f\x89\x13\x6e\xba\x6e\xb8\x78\xbd\xcd\x8e\x36\x65\xee\x14\xe8\x61\x0a\x10\x28\x59\x10\x4d\x18\x67\x24\x89\x3a\x1f\x34\x89\x57\x7a\xf6\xe2\xa3\xa3\x17\x3b\xdb\xfc\xbd\xd2\x02\xee\x73\xc6\xc4\x81\xfe\xdc\xac\xe8\xdb\xc2\x82\x5b\x39\x8f\x0b\xf8\x0c\x3e\x1b\xce\x5e\xe9\xc7\xc3\x67\x48\x09\xf3\x15\x3c\x36\x3b\xe1\xda\x38\x9e\x52\xf5\xb9\x69\x9e\xd7\xca\x37\xfd\x3c\x2b\xcc\x22\x77\xbd\x76\x8d\xd2\x78\x92\xd7\xd7\xb9\x5f\xc6\x66\x01\xa5\x2b\xf3\x7a\xa4\x0e\xc4\xf0\xe9\x30\x05\xca\xde\x36\x53\x7c\xc4\x2c\xe7\xd7\xf0\x9e\xad\x66\xdf\xfb\x18\x1a\xe3\xbe\x1e\x6e\x5f\x7a\x39\x97\x0e\xb3\x27\xc4\x7d\x45\x7e\xc3\x9c\xe1\x13\x24\x7b\xea\x8d\x4c\xb6\x00\x0b\x4b\xe6\x2a\x5a\xef\xe8\x72\xb8\xad\x35\xdf\x27\xee\xab\xd6\x48\x17\x42\xb9\x3d\xc6\xe1\x5a\x62\xc0\x79\xa5\x67\x5e\x5a\x0f\xae\x2f\x0a\x74\xae\xea\xdb\x14\xdc\x90\x0e\x07\xb6\xd7\x5a\xe9\x1a\xb2\x2c\x1b\xeb\xe2\xb0\x45\xe9\x70\xdd\xde\x41\x31\x67\x6c\xf8\x02\xcb\xbe\x6b\x94\x4e\x5e\xbe\x8e\xaf\x5f\x0a\x2a\x84\x69\x9e\xb7\xa6\x90\x2d\x85\x7e\xba\xe5\x32\x3e\x4b\x41\x88\x31\x58\x07\xcf\xf7\xb7\xad\x5d\xce\x19\xcd\xd8\x30\xd5\x5b\x9d\x38\x6f\x69\x55\xff\x37\x00\x00\xff\xff\xc6\x18\xe5\xbf\xd8\x0f\x00\x00")

func stubRouteRouteStubBytes() ([]byte, error) {
	return bindataRead(
		_stubRouteRouteStub,
		"stub/route/route.stub",
	)
}

func stubRouteRouteStub() (*asset, error) {
	bytes, err := stubRouteRouteStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/route/route.stub", size: 4056, mode: os.FileMode(420), modTime: time.Unix(1626771235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubSwordSwordStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xc1\x4e\xc3\x30\x0c\x86\xcf\xf6\x53\xfc\xf4\x94\x1c\xd6\xde\xd1\xb6\x03\x70\x41\xe2\xb4\x17\x98\x4a\x9a\x06\x8b\x36\xe9\x9c\x14\x84\xd0\xde\x1d\x35\x03\x71\xb2\xfd\xe9\xff\x6c\x2f\xbd\x7b\xef\x83\x47\xfe\x4c\x3a\x30\xcb\xbc\x24\x2d\x30\x4c\xcd\x7e\x7f\x1b\xce\x2e\xc5\x51\xc2\xf1\xd8\x30\x00\xfc\x73\x4d\x6b\xf1\x1b\xa6\x33\x9a\x20\xe5\x6d\x7d\x6d\x5d\x9a\xbb\x90\x76\xf9\x32\xed\x06\x95\x0f\xaf\xdd\xfc\x95\x2f\x53\xc3\x96\x79\x5c\xa3\xc3\x69\x8d\x66\x5b\x88\x5c\x54\x62\xb0\xf8\x66\xf2\xaa\xb8\x3f\xe0\x76\xa7\x7d\x49\xfd\xf0\x58\xdb\x1a\xb4\x4c\x32\x62\x8b\xdc\x1d\x10\x65\xda\x04\x5a\xfa\x28\xce\x78\x55\xcb\x74\x65\xfa\x35\x9f\xa3\x94\xa7\x07\x63\x99\xba\x0e\x27\x1f\x24\x17\xaf\xa8\x6f\x32\xd5\xd2\xfe\x51\x63\xf9\xca\x3f\x01\x00\x00\xff\xff\x03\x40\xc7\x55\xfc\x00\x00\x00")

func stubSwordSwordStubBytes() ([]byte, error) {
	return bindataRead(
		_stubSwordSwordStub,
		"stub/sword/sword.stub",
	)
}

func stubSwordSwordStub() (*asset, error) {
	bytes, err := stubSwordSwordStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/sword/sword.stub", size: 252, mode: os.FileMode(420), modTime: time.Unix(1626771157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stub/config/config.stub":         stubConfigConfigStub,
	"stub/controller/controller.stub": stubControllerControllerStub,
	"stub/go.mod.stub":                stubGoModStub,
	"stub/html/create.stub":           stubHtmlCreateStub,
	"stub/html/detail.stub":           stubHtmlDetailStub,
	"stub/html/edit.stub":             stubHtmlEditStub,
	"stub/html/list.stub":             stubHtmlListStub,
	"stub/layout/default.stub":        stubLayoutDefaultStub,
	"stub/main.stub":                  stubMainStub,
	"stub/model/model.stub":           stubModelModelStub,
	"stub/response/response.stub":     stubResponseResponseStub,
	"stub/route/route.stub":           stubRouteRouteStub,
	"stub/sword/sword.stub":           stubSwordSwordStub,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stub": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"config.stub": &bintree{stubConfigConfigStub, map[string]*bintree{}},
		}},
		"controller": &bintree{nil, map[string]*bintree{
			"controller.stub": &bintree{stubControllerControllerStub, map[string]*bintree{}},
		}},
		"go.mod.stub": &bintree{stubGoModStub, map[string]*bintree{}},
		"html": &bintree{nil, map[string]*bintree{
			"create.stub": &bintree{stubHtmlCreateStub, map[string]*bintree{}},
			"detail.stub": &bintree{stubHtmlDetailStub, map[string]*bintree{}},
			"edit.stub":   &bintree{stubHtmlEditStub, map[string]*bintree{}},
			"list.stub":   &bintree{stubHtmlListStub, map[string]*bintree{}},
		}},
		"layout": &bintree{nil, map[string]*bintree{
			"default.stub": &bintree{stubLayoutDefaultStub, map[string]*bintree{}},
		}},
		"main.stub": &bintree{stubMainStub, map[string]*bintree{}},
		"model": &bintree{nil, map[string]*bintree{
			"model.stub": &bintree{stubModelModelStub, map[string]*bintree{}},
		}},
		"response": &bintree{nil, map[string]*bintree{
			"response.stub": &bintree{stubResponseResponseStub, map[string]*bintree{}},
		}},
		"route": &bintree{nil, map[string]*bintree{
			"route.stub": &bintree{stubRouteRouteStub, map[string]*bintree{}},
		}},
		"sword": &bintree{nil, map[string]*bintree{
			"sword.stub": &bintree{stubSwordSwordStub, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
