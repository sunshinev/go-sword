// Sword will check if route file is created, if existed, Sword will modify it
// If you want to recreated the route,you should delete the file,and then use Sword generate again, or you can copy from the `stub/route/route.stub` file

// Do not modify the notes `----Route-begin----` or `----Route-end----` or `----Import----`

package route

import (
	"compress/gzip"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
    "strings"

	"<<import_response>>"
	"<<import_config>>"
	// ----Import----
)

type gZipWriter struct {
	gz *gzip.Writer
	http.ResponseWriter
}

func (u *gZipWriter) Write(p []byte) (int, error) {
	return u.gz.Write(p)
}

func Register() {
	h := http.NewServeMux()
	// Static file
	h.Handle("/go_sword_public/", http.StripPrefix("/go_sword_public/",
		http.FileServer(http.Dir("<<root_path>>/resource/dist"))))
	// Default index.html
	h.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		//Static file route
		handle := http.FileServer(http.Dir("<<root_path>>/resource/dist"))
		w.Header().Set("Content-Encoding", "gzip")

		gz := gzip.NewWriter(w)
		newWriter := &gZipWriter{
			gz:             gz,
			ResponseWriter: w,
		}
		defer gz.Close()
		handle.ServeHTTP(newWriter, r)
	})
	// Render Vue html component
	h.HandleFunc("/render", render)
	// ----Route-begin----

	// Route tag asset_filtertemplate
	h.HandleFunc("/api/asset_filtertemplate/list", handleError(asset_filtertemplate.List))
	h.HandleFunc("/api/asset_filtertemplate/delete", handleError(asset_filtertemplate.Delete))
	h.HandleFunc("/api/asset_filtertemplate/detail", handleError(asset_filtertemplate.Detail))
	h.HandleFunc("/api/asset_filtertemplate/create", handleError(asset_filtertemplate.Create))
	h.HandleFunc("/api/asset_filtertemplate/edit", handleError(asset_filtertemplate.Edit))
	h.HandleFunc("/api/asset_filtertemplate/batch_delete", handleError(asset_filtertemplate.BatchDelete))

	// ----Route-end----

	go func() {
		Welcome()
		err := http.ListenAndServe(fmt.Sprintf(":%v", config.GlobalEngineConfig.ServerPort), h)
		if err != nil {
			panic(err)
		}
	}()
}

func handleError(h func(w http.ResponseWriter, r *http.Request) error) func(w http.ResponseWriter,
	r *http.Request) {

	return func(w http.ResponseWriter, r *http.Request) {
		defer func() {
			if err := recover(); err != nil {
				msg, _ := json.Marshal(response.Ret{
					Code: http.StatusInternalServerError,
					Msg:  fmt.Sprintf("%v", err),
				})

				log.Printf("%s", msg)
				w.Write(msg)
			}
		}()

		err := h(w, r)
		if err != nil {
			log.Printf("%v", err)
			msg, _ := json.Marshal(response.Ret{
				Code: http.StatusInternalServerError,
				Msg:  fmt.Sprintf("%v", err),
			})
			w.Write(msg)
		}
	}
}

func render(writer http.ResponseWriter, request *http.Request) {
	// 解析参数，映射到文件
	err := request.ParseForm()
	if err != nil {
		panic(err.Error())
	}

	path := request.FormValue("path")
	if path == "" {
		panic("lose path param")
	}

	// 从view目录中寻找文件
	body := readFile("<<root_path>>/view" + path + ".html")
	_, err = writer.Write(body)

	if err != nil {
		panic(err.Error())
	}
}

func readFile(path string) []byte {
	body, err := ioutil.ReadFile(path)
	if err != nil {
		panic(err.Error())
	}

	return body
}


func Welcome() {
	str := "\nSTART-------------------------------------\n" +
		"Enjoy your system ^ ^" +
		"\nGenerated by Go-sword" +
		"\nhttps://github.com/sunshinev/go-sword" +
		"\n[Server info]" +
		"\nServer port : " + config.GlobalEngineConfig.ServerPort +
		"\n[db info]" +
		"\nMySQL host : " + config.GlobalEngineConfig.Database.Host +
		"\nMySQL port : " + strconv.Itoa(config.GlobalEngineConfig.Database.Port) +
		"\nMySQL user : " + config.GlobalEngineConfig.Database.User +
		"\nMySQL password : " + config.GlobalEngineConfig.Database.Password +
		"\n\nStart successful, server is running ...\n" +
		"Please request: " +
		strings.Join([]string{"http://localhost:", config.GlobalEngineConfig.ServerPort}, "") +
		"\nEND-------------------------------------\n"

	fmt.Println(str)
}
